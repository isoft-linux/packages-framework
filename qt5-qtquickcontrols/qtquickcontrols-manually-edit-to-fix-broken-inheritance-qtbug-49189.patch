diff -Nur qtquickcontrols-opensource-src-5.5.1/src/controls/plugins.qmltypes qtquickcontrols-opensource-src-5.5.1n/src/controls/plugins.qmltypes
--- qtquickcontrols-opensource-src-5.5.1/src/controls/plugins.qmltypes	2015-10-13 12:35:06.000000000 +0800
+++ qtquickcontrols-opensource-src-5.5.1n/src/controls/plugins.qmltypes	2015-11-07 10:14:53.435985504 +0800
@@ -1,12 +1,22 @@
-import QtQuick.tooling 1.1
+import QtQuick.tooling 1.2
 
 // This file describes the plugin-supplied types contained in the library.
 // It is used for QML tooling purposes only.
 //
 // This file was auto-generated by:
-// 'qmlplugindump -nonrelocatable QtQuick.Controls 1.3'
+// 'qmlplugindump -nonrelocatable QtQuick.Controls 1.4'
 
 Module {
+    dependencies: [
+        "QtGraphicalEffects 1.0",
+        "QtQml.Models 2.2",
+        "QtQuick 2.5",
+        "QtQuick.Controls.Styles 1.4",
+        "QtQuick.Extras 1.4",
+        "QtQuick.Extras.Private.CppUtils 1.1",
+        "QtQuick.Layouts 1.1",
+        "QtQuick.Window 2.2"
+    ]
     Component {
         name: "QQuickAbstractStyle"
         defaultProperty: "data"
@@ -105,6 +115,27 @@
         Property { name: "dragThreshold"; type: "double"; isReadonly: true }
         Property { name: "hasTouchScreen"; type: "bool"; isReadonly: true }
         Property { name: "isMobile"; type: "bool"; isReadonly: true }
+        Property { name: "hoverEnabled"; type: "bool"; isReadonly: true }
+        Method {
+            name: "styleComponent"
+            type: "QQmlComponent*"
+            Parameter { name: "styleDirUrl"; type: "QUrl" }
+            Parameter { name: "controlStyleName"; type: "string" }
+            Parameter { name: "control"; type: "QObject"; isPointer: true }
+        }
+    }
+    Component {
+        name: "QQuickControlsPrivate"
+        prototype: "QObject"
+        exports: ["QtQuick.Controls.Private/Controls 1.0"]
+        isCreatable: false
+        exportMetaObjectRevisions: [0]
+        attachedType: "QQuickControlsPrivateAttached"
+    }
+    Component {
+        name: "QQuickControlsPrivateAttached"
+        prototype: "QObject"
+        Property { name: "window"; type: "QQuickWindow"; isReadonly: true; isPointer: true }
     }
     Component {
         name: "QQuickExclusiveGroup"
@@ -147,12 +178,16 @@
         Property { name: "__yOffset"; type: "double" }
         Property { name: "__action"; type: "QQuickAction"; isReadonly: true; isPointer: true }
         Property { name: "__popupGeometry"; type: "QRect"; isReadonly: true }
-        Signal { name: "__menuClosed" }
+        Signal { name: "aboutToShow" }
+        Signal { name: "aboutToHide" }
         Signal { name: "popupVisibleChanged" }
+        Signal { name: "__menuPopupDestroyed" }
         Signal { name: "menuContentItemChanged" }
         Signal { name: "minimumWidthChanged" }
         Method { name: "__closeMenu" }
         Method { name: "__dismissMenu" }
+        Method { name: "__destroyMenuPopup" }
+        Method { name: "__destroyAllMenuPopups" }
         Method { name: "popup" }
         Method {
             name: "addItem"
@@ -386,17 +421,13 @@
         Property { name: "maximumDate"; type: "QDate" }
     }
     Component {
-        name: "QQuickRootItem"
-        defaultProperty: "data"
-        prototype: "QQuickItem"
-        Method {
-            name: "setWidth"
-            Parameter { name: "w"; type: "int" }
-        }
-        Method {
-            name: "setHeight"
-            Parameter { name: "h"; type: "int" }
-        }
+        name: "QQuickScenePosListener"
+        prototype: "QObject"
+        exports: ["QtQuick.Controls.Private/ScenePosListener 1.0"]
+        exportMetaObjectRevisions: [0]
+        Property { name: "item"; type: "QQuickItem"; isPointer: true }
+        Property { name: "scenePos"; type: "QPointF"; isReadonly: true }
+        Property { name: "enabled"; type: "bool" }
     }
     Component {
         name: "QQuickSelectionMode"
@@ -567,6 +598,53 @@
         Method { name: "hideText" }
     }
     Component {
+        name: "QQuickTreeModelAdaptor"
+        prototype: "QAbstractListModel"
+        exports: ["QtQuick.Controls.Private/TreeModelAdaptor 1.0"]
+        exportMetaObjectRevisions: [0]
+        Property { name: "model"; type: "QAbstractItemModel"; isPointer: true }
+        Signal {
+            name: "modelChanged"
+            Parameter { name: "model"; type: "QAbstractItemModel"; isPointer: true }
+        }
+        Signal {
+            name: "expanded"
+            Parameter { name: "index"; type: "QModelIndex" }
+        }
+        Signal {
+            name: "collapsed"
+            Parameter { name: "index"; type: "QModelIndex" }
+        }
+        Method {
+            name: "expand"
+            Parameter { type: "QModelIndex" }
+        }
+        Method {
+            name: "collapse"
+            Parameter { type: "QModelIndex" }
+        }
+        Method {
+            name: "setModel"
+            Parameter { name: "model"; type: "QAbstractItemModel"; isPointer: true }
+        }
+        Method {
+            name: "mapRowToModelIndex"
+            type: "QModelIndex"
+            Parameter { name: "row"; type: "int" }
+        }
+        Method {
+            name: "selectionForRowRange"
+            type: "QItemSelection"
+            Parameter { name: "fromIndex"; type: "QModelIndex" }
+            Parameter { name: "toIndex"; type: "QModelIndex" }
+        }
+        Method {
+            name: "isExpanded"
+            type: "bool"
+            Parameter { type: "QModelIndex" }
+        }
+    }
+    Component {
         name: "QQuickWheelArea"
         defaultProperty: "data"
         prototype: "QQuickItem"
@@ -586,642 +664,332 @@
         Signal { name: "horizontalWheelMoved" }
     }
     Component {
-        name: "QQuickWindow"
+        prototype: "QQuickWindowQmlImpl"
+        name: "QtQuick.Controls/ApplicationWindow"
+        exports: ["QtQuick.Controls/ApplicationWindow 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
         defaultProperty: "data"
-        prototype: "QWindow"
-        Enum {
-            name: "SceneGraphError"
-            values: {
-                "ContextNotAvailable": 1
-            }
-        }
+        Property { name: "menuBar"; type: "MenuBar_QMLTYPE_3"; isPointer: true }
+        Property { name: "toolBar"; type: "QQuickItem"; isPointer: true }
+        Property { name: "statusBar"; type: "QQuickItem"; isPointer: true }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__topBottomMargins"; type: "double" }
+        Property { name: "__qwindowsize_max"; type: "double"; isReadonly: true }
+        Property { name: "__width"; type: "double" }
+        Property { name: "__height"; type: "double" }
+        Property { name: "contentItem"; type: "ContentItem_QMLTYPE_1"; isReadonly: true; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isReadonly: true; isPointer: true }
+        Property { name: "__panel"; type: "QObject"; isReadonly: true; isPointer: true }
         Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
-        Property { name: "color"; type: "QColor" }
-        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
-        Property {
-            name: "activeFocusItem"
-            revision: 1
-            type: "QQuickItem"
-            isReadonly: true
-            isPointer: true
-        }
-        Signal { name: "frameSwapped" }
-        Signal {
-            name: "openglContextCreated"
-            revision: 2
-            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
-        }
-        Signal { name: "sceneGraphInitialized" }
-        Signal { name: "sceneGraphInvalidated" }
-        Signal { name: "beforeSynchronizing" }
-        Signal { name: "afterSynchronizing"; revision: 2 }
-        Signal { name: "beforeRendering" }
-        Signal { name: "afterRendering" }
-        Signal { name: "afterAnimating"; revision: 2 }
-        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
-        Signal {
-            name: "closing"
-            revision: 1
-            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
-        }
-        Signal {
-            name: "colorChanged"
-            Parameter { type: "QColor" }
-        }
-        Signal { name: "activeFocusItemChanged"; revision: 1 }
-        Signal {
-            name: "sceneGraphError"
-            revision: 2
-            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
-            Parameter { name: "message"; type: "string" }
-        }
-        Method { name: "update" }
-        Method { name: "releaseResources" }
     }
     Component {
-        name: "QWindow"
-        prototype: "QObject"
-        Enum {
-            name: "Visibility"
-            values: {
-                "Hidden": 0,
-                "AutomaticVisibility": 1,
-                "Windowed": 2,
-                "Minimized": 3,
-                "Maximized": 4,
-                "FullScreen": 5
-            }
-        }
-        Property { name: "title"; type: "string" }
-        Property { name: "modality"; type: "Qt::WindowModality" }
-        Property { name: "flags"; type: "Qt::WindowFlags" }
-        Property { name: "x"; type: "int" }
-        Property { name: "y"; type: "int" }
-        Property { name: "width"; type: "int" }
-        Property { name: "height"; type: "int" }
-        Property { name: "minimumWidth"; type: "int" }
-        Property { name: "minimumHeight"; type: "int" }
-        Property { name: "maximumWidth"; type: "int" }
-        Property { name: "maximumHeight"; type: "int" }
-        Property { name: "visible"; type: "bool" }
-        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
-        Property { name: "visibility"; revision: 1; type: "Visibility" }
-        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
-        Property { name: "opacity"; revision: 1; type: "double" }
-        Signal {
-            name: "screenChanged"
-            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
-        }
-        Signal {
-            name: "modalityChanged"
-            Parameter { name: "modality"; type: "Qt::WindowModality" }
-        }
-        Signal {
-            name: "windowStateChanged"
-            Parameter { name: "windowState"; type: "Qt::WindowState" }
-        }
-        Signal {
-            name: "windowTitleChanged"
-            revision: 2
-            Parameter { name: "title"; type: "string" }
-        }
-        Signal {
-            name: "xChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "yChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "widthChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Controls/BusyIndicator"
+        exports: ["QtQuick.Controls/BusyIndicator 1.1"]
+        exportMetaObjectRevisions: [1]
+        isComposite: true
+        defaultProperty: "data"
+        Property { name: "running"; type: "bool" }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
+    }
+    Component {
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Controls/Button"
+        exports: ["QtQuick.Controls/Button 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "data"
+        Property { name: "isDefault"; type: "bool" }
+        Property { name: "menu"; type: "Menu_QMLTYPE_50"; isPointer: true }
+        Property { name: "checkable"; type: "bool" }
+        Property { name: "checked"; type: "bool" }
+        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
+        Property { name: "action"; type: "QQuickAction"; isPointer: true }
+        Property { name: "activeFocusOnPress"; type: "bool" }
+        Property { name: "text"; type: "string" }
+        Property { name: "tooltip"; type: "string" }
+        Property { name: "iconSource"; type: "QUrl" }
+        Property { name: "iconName"; type: "string" }
+        Property { name: "__position"; type: "string" }
+        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
+        Property { name: "__action"; type: "QQuickAction"; isPointer: true }
+        Property { name: "__iconAction"; type: "QQuickAction"; isReadonly: true; isPointer: true }
+        Property { name: "__effectivePressed"; type: "bool" }
+        Property { name: "__behavior"; type: "QVariant" }
+        Property { name: "pressed"; type: "bool"; isReadonly: true }
+        Property { name: "hovered"; type: "bool"; isReadonly: true }
+        Signal { name: "clicked" }
+        Method { name: "accessiblePressAction"; type: "QVariant" }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
+    }
+    Component {
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Controls/Calendar"
+        exports: ["QtQuick.Controls/Calendar 1.2"]
+        exportMetaObjectRevisions: [2]
+        isComposite: true
+        defaultProperty: "data"
+        Property { name: "visibleMonth"; type: "int" }
+        Property { name: "visibleYear"; type: "int" }
+        Property { name: "frameVisible"; type: "bool" }
+        Property { name: "weekNumbersVisible"; type: "bool" }
+        Property { name: "navigationBarVisible"; type: "bool" }
+        Property { name: "dayOfWeekFormat"; type: "int" }
+        Property { name: "__model"; type: "QQuickCalendarModel"; isPointer: true }
+        Property { name: "__locale"; type: "QVariant" }
+        Property { name: "selectedDate"; type: "QDate" }
+        Property { name: "minimumDate"; type: "QDate" }
+        Property { name: "maximumDate"; type: "QDate" }
         Signal {
-            name: "heightChanged"
-            Parameter { name: "arg"; type: "int" }
+            name: "hovered"
+            Parameter { name: "date"; type: "QDateTime" }
         }
         Signal {
-            name: "minimumWidthChanged"
-            Parameter { name: "arg"; type: "int" }
+            name: "pressed"
+            Parameter { name: "date"; type: "QDateTime" }
         }
         Signal {
-            name: "minimumHeightChanged"
-            Parameter { name: "arg"; type: "int" }
+            name: "released"
+            Parameter { name: "date"; type: "QDateTime" }
         }
         Signal {
-            name: "maximumWidthChanged"
-            Parameter { name: "arg"; type: "int" }
+            name: "clicked"
+            Parameter { name: "date"; type: "QDateTime" }
         }
         Signal {
-            name: "maximumHeightChanged"
-            Parameter { name: "arg"; type: "int" }
+            name: "doubleClicked"
+            Parameter { name: "date"; type: "QDateTime" }
         }
         Signal {
-            name: "visibleChanged"
-            Parameter { name: "arg"; type: "bool" }
-        }
-        Signal {
-            name: "visibilityChanged"
-            revision: 1
-            Parameter { name: "visibility"; type: "QWindow::Visibility" }
-        }
-        Signal { name: "activeChanged"; revision: 1 }
-        Signal {
-            name: "contentOrientationChanged"
-            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
-        }
-        Signal {
-            name: "focusObjectChanged"
-            Parameter { name: "object"; type: "QObject"; isPointer: true }
-        }
-        Signal {
-            name: "opacityChanged"
-            revision: 1
-            Parameter { name: "opacity"; type: "double" }
-        }
-        Method { name: "requestActivate"; revision: 1 }
-        Method {
-            name: "setVisible"
-            Parameter { name: "visible"; type: "bool" }
-        }
-        Method { name: "show" }
-        Method { name: "hide" }
-        Method { name: "showMinimized" }
-        Method { name: "showMaximized" }
-        Method { name: "showFullScreen" }
-        Method { name: "showNormal" }
-        Method { name: "close"; type: "bool" }
-        Method { name: "raise" }
-        Method { name: "lower" }
-        Method {
-            name: "setTitle"
-            Parameter { type: "string" }
-        }
-        Method {
-            name: "setX"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Method {
-            name: "setY"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Method {
-            name: "setWidth"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Method {
-            name: "setHeight"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Method {
-            name: "setMinimumWidth"
-            Parameter { name: "w"; type: "int" }
-        }
-        Method {
-            name: "setMinimumHeight"
-            Parameter { name: "h"; type: "int" }
-        }
-        Method {
-            name: "setMaximumWidth"
-            Parameter { name: "w"; type: "int" }
-        }
-        Method {
-            name: "setMaximumHeight"
-            Parameter { name: "h"; type: "int" }
-        }
-        Method {
-            name: "alert"
-            revision: 1
-            Parameter { name: "msec"; type: "int" }
+            name: "pressAndHold"
+            Parameter { name: "date"; type: "QDateTime" }
         }
+        Method { name: "showPreviousMonth"; type: "QVariant" }
+        Method { name: "showNextMonth"; type: "QVariant" }
+        Method { name: "showPreviousYear"; type: "QVariant" }
+        Method { name: "showNextYear"; type: "QVariant" }
+        Method { name: "__selectPreviousMonth"; type: "QVariant" }
+        Method { name: "__selectNextMonth"; type: "QVariant" }
+        Method { name: "__selectPreviousWeek"; type: "QVariant" }
+        Method { name: "__selectNextWeek"; type: "QVariant" }
+        Method { name: "__selectFirstDayOfMonth"; type: "QVariant" }
+        Method { name: "__selectLastDayOfMonth"; type: "QVariant" }
+        Method { name: "__selectPreviousDay"; type: "QVariant" }
+        Method { name: "__selectNextDay"; type: "QVariant" }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
     }
     Component {
-        name: "QWindow"
-        prototype: "QObject"
-        Enum {
-            name: "Visibility"
-            values: {
-                "Hidden": 0,
-                "AutomaticVisibility": 1,
-                "Windowed": 2,
-                "Minimized": 3,
-                "Maximized": 4,
-                "FullScreen": 5
-            }
-        }
-        Property { name: "title"; type: "string" }
-        Property { name: "modality"; type: "Qt::WindowModality" }
-        Property { name: "flags"; type: "Qt::WindowFlags" }
-        Property { name: "x"; type: "int" }
-        Property { name: "y"; type: "int" }
-        Property { name: "width"; type: "int" }
-        Property { name: "height"; type: "int" }
-        Property { name: "minimumWidth"; type: "int" }
-        Property { name: "minimumHeight"; type: "int" }
-        Property { name: "maximumWidth"; type: "int" }
-        Property { name: "maximumHeight"; type: "int" }
-        Property { name: "visible"; type: "bool" }
-        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
-        Property { name: "visibility"; revision: 1; type: "Visibility" }
-        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
-        Property { name: "opacity"; revision: 1; type: "double" }
-        Signal {
-            name: "screenChanged"
-            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
-        }
-        Signal {
-            name: "modalityChanged"
-            Parameter { name: "modality"; type: "Qt::WindowModality" }
-        }
-        Signal {
-            name: "windowStateChanged"
-            Parameter { name: "windowState"; type: "Qt::WindowState" }
-        }
-        Signal {
-            name: "windowTitleChanged"
-            revision: 2
-            Parameter { name: "title"; type: "string" }
-        }
-        Signal {
-            name: "xChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "yChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "widthChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "heightChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "minimumWidthChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "minimumHeightChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "maximumWidthChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "maximumHeightChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "visibleChanged"
-            Parameter { name: "arg"; type: "bool" }
-        }
-        Signal {
-            name: "visibilityChanged"
-            revision: 1
-            Parameter { name: "visibility"; type: "QWindow::Visibility" }
-        }
-        Signal { name: "activeChanged"; revision: 1 }
-        Signal {
-            name: "contentOrientationChanged"
-            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
-        }
-        Signal {
-            name: "focusObjectChanged"
-            Parameter { name: "object"; type: "QObject"; isPointer: true }
-        }
-        Signal {
-            name: "opacityChanged"
-            revision: 1
-            Parameter { name: "opacity"; type: "double" }
-        }
-        Method { name: "requestActivate"; revision: 1 }
-        Method {
-            name: "setVisible"
-            Parameter { name: "visible"; type: "bool" }
-        }
-        Method { name: "show" }
-        Method { name: "hide" }
-        Method { name: "showMinimized" }
-        Method { name: "showMaximized" }
-        Method { name: "showFullScreen" }
-        Method { name: "showNormal" }
-        Method { name: "close"; type: "bool" }
-        Method { name: "raise" }
-        Method { name: "lower" }
-        Method {
-            name: "setTitle"
-            Parameter { type: "string" }
-        }
-        Method {
-            name: "setX"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Method {
-            name: "setY"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Method {
-            name: "setWidth"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Method {
-            name: "setHeight"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Method {
-            name: "setMinimumWidth"
-            Parameter { name: "w"; type: "int" }
-        }
-        Method {
-            name: "setMinimumHeight"
-            Parameter { name: "h"; type: "int" }
-        }
-        Method {
-            name: "setMaximumWidth"
-            Parameter { name: "w"; type: "int" }
-        }
-        Method {
-            name: "setMaximumHeight"
-            Parameter { name: "h"; type: "int" }
-        }
-        Method {
-            name: "alert"
-            revision: 1
-            Parameter { name: "msec"; type: "int" }
-        }
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Controls/CheckBox"
+        exports: ["QtQuick.Controls/CheckBox 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "data"
+        Property { name: "checkedState"; type: "int" }
+        Property { name: "partiallyCheckedEnabled"; type: "bool" }
+        Property { name: "__ignoreChecked"; type: "bool" }
+        Property { name: "__ignoreCheckedState"; type: "bool" }
+        Method { name: "__cycleCheckBoxStates"; type: "QVariant" }
+        Property { name: "checked"; type: "bool" }
+        Property { name: "activeFocusOnPress"; type: "bool" }
+        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
+        Property { name: "text"; type: "string" }
+        Property { name: "__cycleStatesHandler"; type: "QVariant" }
+        Property { name: "pressed"; type: "bool" }
+        Property { name: "hovered"; type: "bool"; isReadonly: true }
+        Signal { name: "clicked" }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
     }
     Component {
-        name: "QQuickWindow"
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Extras.Private/CircularButton"
+        exports: ["QtQuick.Extras.Private/CircularButton 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
         defaultProperty: "data"
-        prototype: "QWindow"
-        exports: ["QtQuick.Window/Window 2.0"]
+        Property { name: "isDefault"; type: "bool" }
+        Property { name: "menu"; type: "Menu_QMLTYPE_50"; isPointer: true }
+        Property { name: "checkable"; type: "bool" }
+        Property { name: "checked"; type: "bool" }
+        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
+        Property { name: "action"; type: "QQuickAction"; isPointer: true }
+        Property { name: "activeFocusOnPress"; type: "bool" }
+        Property { name: "text"; type: "string" }
+        Property { name: "tooltip"; type: "string" }
+        Property { name: "iconSource"; type: "QUrl" }
+        Property { name: "iconName"; type: "string" }
+        Property { name: "__position"; type: "string" }
+        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
+        Property { name: "__action"; type: "QQuickAction"; isPointer: true }
+        Property { name: "__iconAction"; type: "QQuickAction"; isReadonly: true; isPointer: true }
+        Property { name: "__effectivePressed"; type: "bool" }
+        Property { name: "__behavior"; type: "QVariant" }
+        Property { name: "pressed"; type: "bool"; isReadonly: true }
+        Property { name: "hovered"; type: "bool"; isReadonly: true }
+        Signal { name: "clicked" }
+        Method { name: "accessiblePressAction"; type: "QVariant" }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
+    }
+    Component {
+        prototype: "QObject"
+        name: "QtQuick.Extras.Private/CircularButtonStyleHelper"
+        exports: ["QtQuick.Extras.Private/CircularButtonStyleHelper 1.0"]
         exportMetaObjectRevisions: [0]
-        Enum {
-            name: "SceneGraphError"
-            values: {
-                "ContextNotAvailable": 1
-            }
-        }
-        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
-        Property { name: "color"; type: "QColor" }
-        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
-        Property {
-            name: "activeFocusItem"
-            revision: 1
-            type: "QQuickItem"
-            isReadonly: true
-            isPointer: true
-        }
-        Signal { name: "frameSwapped" }
-        Signal {
-            name: "openglContextCreated"
-            revision: 2
-            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
-        }
-        Signal { name: "sceneGraphInitialized" }
-        Signal { name: "sceneGraphInvalidated" }
-        Signal { name: "beforeSynchronizing" }
-        Signal { name: "afterSynchronizing"; revision: 2 }
-        Signal { name: "beforeRendering" }
-        Signal { name: "afterRendering" }
-        Signal { name: "afterAnimating"; revision: 2 }
-        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
-        Signal {
-            name: "closing"
-            revision: 1
-            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
-        }
-        Signal {
-            name: "colorChanged"
-            Parameter { type: "QColor" }
-        }
-        Signal { name: "activeFocusItemChanged"; revision: 1 }
-        Signal {
-            name: "sceneGraphError"
-            revision: 2
-            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
-            Parameter { name: "message"; type: "string" }
+        isComposite: true
+        Property { name: "control"; type: "QQuickItem"; isPointer: true }
+        Property { name: "buttonColorUpTop"; type: "QColor" }
+        Property { name: "buttonColorUpBottom"; type: "QColor" }
+        Property { name: "buttonColorDownTop"; type: "QColor" }
+        Property { name: "buttonColorDownBottom"; type: "QColor" }
+        Property { name: "outerArcColorTop"; type: "QColor" }
+        Property { name: "outerArcColorBottom"; type: "QColor" }
+        Property { name: "innerArcColorTop"; type: "QColor" }
+        Property { name: "innerArcColorBottom"; type: "QColor" }
+        Property { name: "innerArcColorBottomStop"; type: "double" }
+        Property { name: "shineColor"; type: "QColor" }
+        Property { name: "smallestAxis"; type: "double" }
+        Property { name: "outerArcLineWidth"; type: "double" }
+        Property { name: "innerArcLineWidth"; type: "double" }
+        Property { name: "shineArcLineWidth"; type: "double" }
+        Property { name: "implicitWidth"; type: "double" }
+        Property { name: "implicitHeight"; type: "double" }
+        Property { name: "textColorUp"; type: "QColor" }
+        Property { name: "textColorDown"; type: "QColor" }
+        Property { name: "textRaisedColorUp"; type: "QColor" }
+        Property { name: "textRaisedColorDown"; type: "QColor" }
+        Property { name: "radius"; type: "double" }
+        Property { name: "halfRadius"; type: "double" }
+        Property { name: "outerArcRadius"; type: "double" }
+        Property { name: "innerArcRadius"; type: "double" }
+        Property { name: "shineArcRadius"; type: "double" }
+        Property { name: "zeroAngle"; type: "double" }
+        Property { name: "buttonColorTop"; type: "QColor" }
+        Property { name: "buttonColorBottom"; type: "QColor" }
+        Method {
+            name: "toPixels"
+            type: "QVariant"
+            Parameter { name: "percentageOfSmallestAxis"; type: "QVariant" }
+        }
+        Method {
+            name: "paintBackground"
+            type: "QVariant"
+            Parameter { name: "ctx"; type: "QVariant" }
         }
-        Method { name: "update" }
-        Method { name: "releaseResources" }
     }
     Component {
-        prototype: "QQuickWindow"
-        name: "QtQuick.Controls/ApplicationWindow"
-        exports: ["QtQuick.Controls/ApplicationWindow 1.0"]
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Extras/CircularGauge"
+        exports: ["QtQuick.Extras/CircularGauge 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
         defaultProperty: "data"
-        Property { name: "menuBar"; type: "MenuBar_QMLTYPE_3"; isPointer: true }
-        Property { name: "toolBar"; type: "QQuickItem"; isPointer: true }
-        Property { name: "statusBar"; type: "QQuickItem"; isPointer: true }
+        Property { name: "tickmarksVisible"; type: "bool" }
+        Property { name: "minimumValue"; type: "double" }
+        Property { name: "maximumValue"; type: "double" }
+        Property { name: "value"; type: "double" }
+        Property { name: "stepSize"; type: "double" }
         Property { name: "style"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "__topBottomMargins"; type: "double" }
-        Property { name: "__qwindowsize_max"; type: "double"; isReadonly: true }
-        Property { name: "__width"; type: "double" }
-        Property { name: "__height"; type: "double" }
-        Property {
-            name: "contentItem"
-            type: "ContentItem_QMLTYPE_11"
-            isReadonly: true
-            isPointer: true
-        }
-        Property { name: "__style"; type: "QObject"; isReadonly: true; isPointer: true }
-        Property { name: "__panel"; type: "QObject"; isReadonly: true; isPointer: true }
-        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
-        Property { name: "visible"; type: "bool" }
-        Property { name: "visibility"; type: "Visibility" }
-        Signal {
-            name: "visibleChanged"
-            Parameter { name: "arg"; type: "bool" }
-        }
-        Signal {
-            name: "visibilityChanged"
-            Parameter { name: "visibility"; type: "QWindow::Visibility" }
-        }
-        Property { name: "color"; type: "QColor" }
-        Property {
-            name: "activeFocusItem"
-            revision: 1
-            type: "QQuickItem"
-            isReadonly: true
-            isPointer: true
-        }
-        Signal { name: "frameSwapped" }
-        Signal {
-            name: "openglContextCreated"
-            revision: 2
-            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
-        }
-        Signal { name: "sceneGraphInitialized" }
-        Signal { name: "sceneGraphInvalidated" }
-        Signal { name: "beforeSynchronizing" }
-        Signal { name: "afterSynchronizing"; revision: 2 }
-        Signal { name: "beforeRendering" }
-        Signal { name: "afterRendering" }
-        Signal { name: "afterAnimating"; revision: 2 }
-        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
-        Signal {
-            name: "closing"
-            revision: 1
-            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
-        }
-        Signal {
-            name: "colorChanged"
-            Parameter { type: "QColor" }
-        }
-        Signal {
-            name: "sceneGraphError"
-            revision: 2
-            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
-            Parameter { name: "message"; type: "string" }
-        }
-        Method { name: "update" }
-        Method { name: "releaseResources" }
-        Property { name: "title"; type: "string" }
-        Property { name: "modality"; type: "Qt::WindowModality" }
-        Property { name: "flags"; type: "Qt::WindowFlags" }
-        Property { name: "x"; type: "int" }
-        Property { name: "y"; type: "int" }
-        Property { name: "width"; type: "int" }
-        Property { name: "height"; type: "int" }
-        Property { name: "minimumWidth"; type: "int" }
-        Property { name: "minimumHeight"; type: "int" }
-        Property { name: "maximumWidth"; type: "int" }
-        Property { name: "maximumHeight"; type: "int" }
-        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
-        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
-        Property { name: "opacity"; revision: 1; type: "double" }
-        Signal {
-            name: "screenChanged"
-            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
-        }
-        Signal {
-            name: "modalityChanged"
-            Parameter { name: "modality"; type: "Qt::WindowModality" }
-        }
-        Signal {
-            name: "windowStateChanged"
-            Parameter { name: "windowState"; type: "Qt::WindowState" }
-        }
-        Signal {
-            name: "windowTitleChanged"
-            revision: 2
-            Parameter { name: "title"; type: "string" }
-        }
-        Signal {
-            name: "xChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "yChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "widthChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "heightChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "minimumWidthChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "minimumHeightChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "maximumWidthChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "maximumHeightChanged"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Signal {
-            name: "contentOrientationChanged"
-            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
-        }
-        Signal {
-            name: "focusObjectChanged"
-            Parameter { name: "object"; type: "QObject"; isPointer: true }
-        }
-        Signal {
-            name: "opacityChanged"
-            revision: 1
-            Parameter { name: "opacity"; type: "double" }
-        }
-        Method { name: "requestActivate"; revision: 1 }
-        Method {
-            name: "setVisible"
-            Parameter { name: "visible"; type: "bool" }
-        }
-        Method { name: "show" }
-        Method { name: "hide" }
-        Method { name: "showMinimized" }
-        Method { name: "showMaximized" }
-        Method { name: "showFullScreen" }
-        Method { name: "showNormal" }
-        Method { name: "close"; type: "bool" }
-        Method { name: "raise" }
-        Method { name: "lower" }
-        Method {
-            name: "setTitle"
-            Parameter { type: "string" }
-        }
-        Method {
-            name: "setX"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Method {
-            name: "setY"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Method {
-            name: "setWidth"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Method {
-            name: "setHeight"
-            Parameter { name: "arg"; type: "int" }
-        }
-        Method {
-            name: "setMinimumWidth"
-            Parameter { name: "w"; type: "int" }
-        }
-        Method {
-            name: "setMinimumHeight"
-            Parameter { name: "h"; type: "int" }
-        }
-        Method {
-            name: "setMaximumWidth"
-            Parameter { name: "w"; type: "int" }
-        }
-        Method {
-            name: "setMaximumHeight"
-            Parameter { name: "h"; type: "int" }
-        }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
+    }
+    Component {
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Extras.Private/CircularTickmarkLabel"
+        exports: ["QtQuick.Extras.Private/CircularTickmarkLabel 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "data"
+        Property { name: "minimumValueAngle"; type: "double" }
+        Property { name: "maximumValueAngle"; type: "double" }
+        Property { name: "angleRange"; type: "double"; isReadonly: true }
+        Property { name: "tickmarkStepSize"; type: "double" }
+        Property { name: "tickmarkInset"; type: "double" }
+        Property { name: "tickmarkCount"; type: "int"; isReadonly: true }
+        Property { name: "minorTickmarkCount"; type: "int" }
+        Property { name: "minorTickmarkInset"; type: "double" }
+        Property { name: "labelInset"; type: "double" }
+        Property { name: "labelStepSize"; type: "double" }
+        Property { name: "labelCount"; type: "int"; isReadonly: true }
+        Property { name: "__tickmarkCount"; type: "double"; isReadonly: true }
+        Property { name: "tickmarksVisible"; type: "bool" }
+        Property { name: "minimumValue"; type: "double" }
+        Property { name: "maximumValue"; type: "double" }
+        Property { name: "stepSize"; type: "double" }
         Method {
-            name: "alert"
-            revision: 1
-            Parameter { name: "msec"; type: "int" }
+            name: "valueToAngle"
+            type: "QVariant"
+            Parameter { name: "value"; type: "QVariant" }
         }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
     }
     Component {
         prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/BusyIndicator"
-        exports: ["QtQuick.Controls/BusyIndicator 1.1"]
-        exportMetaObjectRevisions: [1]
+        name: "QtQuick.Controls/ComboBox"
+        exports: ["QtQuick.Controls/ComboBox 1.0"]
+        exportMetaObjectRevisions: [0]
         isComposite: true
         defaultProperty: "data"
-        Property { name: "running"; type: "bool" }
+        Property { name: "textRole"; type: "string" }
+        Property { name: "editable"; type: "bool" }
+        Property { name: "activeFocusOnPress"; type: "bool" }
+        Property { name: "pressed"; type: "bool"; isReadonly: true }
+        Property { name: "hovered"; type: "bool"; isReadonly: true }
+        Property { name: "menu"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "selectByMouse"; type: "bool" }
+        Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
+        Property { name: "__popup"; type: "QVariant" }
+        Property { name: "model"; type: "QVariant" }
+        Property { name: "currentIndex"; type: "int" }
+        Property { name: "currentText"; type: "string"; isReadonly: true }
+        Property { name: "editText"; type: "string" }
+        Property { name: "count"; type: "int"; isReadonly: true }
+        Property { name: "validator"; type: "QValidator"; isPointer: true }
+        Property { name: "acceptableInput"; type: "bool"; isReadonly: true }
+        Signal { name: "accepted" }
+        Signal {
+            name: "activated"
+            Parameter { name: "index"; type: "int" }
+        }
+        Method {
+            name: "textAt"
+            type: "QVariant"
+            Parameter { name: "index"; type: "QVariant" }
+        }
+        Method {
+            name: "find"
+            type: "QVariant"
+            Parameter { name: "text"; type: "QVariant" }
+        }
+        Method { name: "selectAll"; type: "QVariant" }
+        Method { name: "__selectPrevItem"; type: "QVariant" }
+        Method { name: "__selectNextItem"; type: "QVariant" }
         Property { name: "style"; type: "QQmlComponent"; isPointer: true }
         Property { name: "__style"; type: "QObject"; isPointer: true }
         Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
@@ -1230,13 +998,17 @@
     }
     Component {
         prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/Button"
-        exports: ["QtQuick.Controls/Button 1.0"]
+        name: "QtQuick.Extras/DelayButton"
+        exports: ["QtQuick.Extras/DelayButton 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
         defaultProperty: "data"
+        Property { name: "delay"; type: "int" }
+        Property { name: "__progress"; type: "double" }
+        Property { name: "progress"; type: "double"; isReadonly: true }
+        Signal { name: "activated" }
         Property { name: "isDefault"; type: "bool" }
-        Property { name: "menu"; type: "Menu_QMLTYPE_49"; isPointer: true }
+        Property { name: "menu"; type: "Menu_QMLTYPE_50"; isPointer: true }
         Property { name: "checkable"; type: "bool" }
         Property { name: "checked"; type: "bool" }
         Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
@@ -1264,58 +1036,260 @@
     }
     Component {
         prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/Calendar"
-        exports: ["QtQuick.Controls/Calendar 1.2"]
-        exportMetaObjectRevisions: [2]
+        name: "QtQuick.Extras/Dial"
+        exports: ["QtQuick.Extras/Dial 1.1"]
+        exportMetaObjectRevisions: [1]
         isComposite: true
         defaultProperty: "data"
-        Property { name: "visibleMonth"; type: "int" }
-        Property { name: "visibleYear"; type: "int" }
-        Property { name: "frameVisible"; type: "bool" }
-        Property { name: "weekNumbersVisible"; type: "bool" }
-        Property { name: "navigationBarVisible"; type: "bool" }
-        Property { name: "dayOfWeekFormat"; type: "int" }
-        Property { name: "__model"; type: "QQuickCalendarModel"; isPointer: true }
-        Property { name: "__locale"; type: "QVariant" }
-        Property { name: "selectedDate"; type: "QDate" }
-        Property { name: "minimumDate"; type: "QDate" }
-        Property { name: "maximumDate"; type: "QDate" }
-        Signal {
-            name: "hovered"
-            Parameter { name: "date"; type: "QDateTime" }
+        Property { name: "__wrap"; type: "bool" }
+        Property { name: "activeFocusOnPress"; type: "bool" }
+        Property { name: "tickmarksVisible"; type: "bool" }
+        Property { name: "value"; type: "double" }
+        Property { name: "minimumValue"; type: "double" }
+        Property { name: "maximumValue"; type: "double" }
+        Property { name: "hovered"; type: "bool"; isReadonly: true }
+        Property { name: "stepSize"; type: "double" }
+        Property { name: "pressed"; type: "bool"; isReadonly: true }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
+    }
+    Component {
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Extras/Gauge"
+        exports: ["QtQuick.Extras/Gauge 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "data"
+        Property { name: "orientation"; type: "int" }
+        Property { name: "tickmarkAlignment"; type: "int" }
+        Property { name: "__tickmarkAlignment"; type: "int" }
+        Property { name: "__tickmarksInside"; type: "bool" }
+        Property { name: "tickmarkStepSize"; type: "double" }
+        Property { name: "minorTickmarkCount"; type: "int" }
+        Property { name: "formatValue"; type: "QVariant" }
+        Property { name: "minimumValue"; type: "double" }
+        Property { name: "value"; type: "double" }
+        Property { name: "maximumValue"; type: "double" }
+        Property { name: "font"; type: "QFont" }
+        Property { name: "__hiddenText"; type: "QQuickText"; isReadonly: true; isPointer: true }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
+    }
+    Component {
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Controls/GroupBox"
+        exports: ["QtQuick.Controls/GroupBox 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "__content"
+        Property { name: "title"; type: "string" }
+        Property { name: "flat"; type: "bool" }
+        Property { name: "checkable"; type: "bool" }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "checked"; type: "bool" }
+        Property { name: "__content"; type: "QObject"; isList: true; isReadonly: true }
+        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
+        Property { name: "__checkbox"; type: "CheckBox_QMLTYPE_74"; isReadonly: true; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isReadonly: true; isPointer: true }
+    }
+    Component {
+        prototype: "QQuickText"
+        name: "QtQuick.Controls/Label"
+        exports: ["QtQuick.Controls/Label 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "data"
+    }
+    Component {
+        prototype: "QObject"
+        name: "QtQuick.Controls/Menu"
+        exports: ["QtQuick.Controls/Menu 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "items"
+        Property { name: "__selfComponent"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__usingDefaultStyle"; type: "bool" }
+        Property { name: "__currentIndex"; type: "int" }
+        Property { name: "__parentContentItem"; type: "QVariant" }
+        Method {
+            name: "addMenu"
+            type: "QVariant"
+            Parameter { name: "title"; type: "QVariant" }
         }
-        Signal {
-            name: "pressed"
-            Parameter { name: "date"; type: "QDateTime" }
+        Method {
+            name: "insertMenu"
+            type: "QVariant"
+            Parameter { name: "index"; type: "QVariant" }
+            Parameter { name: "title"; type: "QVariant" }
         }
-        Signal {
-            name: "released"
-            Parameter { name: "date"; type: "QDateTime" }
+        Property { name: "title"; type: "string" }
+        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
+        Property { name: "__selectedIndex"; type: "int" }
+        Property { name: "__popupVisible"; type: "bool"; isReadonly: true }
+        Property { name: "__contentItem"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__minimumWidth"; type: "int" }
+        Property { name: "__font"; type: "QFont" }
+        Property { name: "__xOffset"; type: "double" }
+        Property { name: "__yOffset"; type: "double" }
+        Property { name: "__action"; type: "QQuickAction"; isReadonly: true; isPointer: true }
+        Property { name: "__popupGeometry"; type: "QRect"; isReadonly: true }
+        Signal { name: "aboutToShow" }
+        Signal { name: "aboutToHide" }
+        Signal { name: "popupVisibleChanged" }
+        Signal { name: "__menuPopupDestroyed" }
+        Signal { name: "menuContentItemChanged" }
+        Signal { name: "minimumWidthChanged" }
+        Method { name: "__closeMenu" }
+        Method { name: "__dismissMenu" }
+        Method { name: "__destroyMenuPopup" }
+        Method { name: "__destroyAllMenuPopups" }
+        Method { name: "popup" }
+        Method {
+            name: "addItem"
+            type: "QQuickMenuItem*"
+            Parameter { type: "string" }
         }
-        Signal {
-            name: "clicked"
-            Parameter { name: "date"; type: "QDateTime" }
+        Method {
+            name: "insertItem"
+            type: "QQuickMenuItem*"
+            Parameter { type: "int" }
+            Parameter { type: "string" }
         }
-        Signal {
-            name: "doubleClicked"
-            Parameter { name: "date"; type: "QDateTime" }
+        Method { name: "addSeparator" }
+        Method {
+            name: "insertSeparator"
+            Parameter { type: "int" }
         }
-        Signal {
-            name: "pressAndHold"
-            Parameter { name: "date"; type: "QDateTime" }
+        Method {
+            name: "removeItem"
+            Parameter { type: "QQuickMenuBase"; isPointer: true }
+        }
+        Method { name: "clear" }
+        Method {
+            name: "__popup"
+            Parameter { name: "targetRect"; type: "QRectF" }
+            Parameter { name: "atItemIndex"; type: "int" }
+            Parameter { name: "menuType"; type: "MenuType" }
+        }
+        Method {
+            name: "__popup"
+            Parameter { name: "targetRect"; type: "QRectF" }
+            Parameter { name: "atItemIndex"; type: "int" }
+        }
+        Method {
+            name: "__popup"
+            Parameter { name: "targetRect"; type: "QRectF" }
+        }
+        Property { name: "enabled"; type: "bool" }
+        Property { name: "iconSource"; type: "QUrl" }
+        Property { name: "iconName"; type: "string" }
+        Property { name: "__icon"; type: "QVariant"; isReadonly: true }
+        Signal { name: "__textChanged" }
+        Property { name: "visible"; type: "bool" }
+        Property { name: "type"; type: "QQuickMenuItemType::MenuItemType"; isReadonly: true }
+        Property { name: "__parentMenu"; type: "QObject"; isReadonly: true; isPointer: true }
+        Property { name: "__isNative"; type: "bool"; isReadonly: true }
+        Property { name: "__visualItem"; type: "QQuickItem"; isPointer: true }
+    }
+    Component {
+        prototype: "QObject"
+        name: "QtQuick.Controls/MenuBar"
+        exports: ["QtQuick.Controls/MenuBar 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "menus"
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__menuBarComponent"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "menus"; type: "QQuickMenu"; isList: true; isReadonly: true }
+        Property { name: "__contentItem"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__parentWindow"; type: "QQuickWindow"; isPointer: true }
+        Property { name: "__isNative"; type: "bool" }
+        Signal { name: "nativeChanged" }
+        Signal { name: "contentItemChanged" }
+    }
+    Component {
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Extras/PieMenu"
+        exports: ["QtQuick.Extras/PieMenu 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "menuItems"
+        Property { name: "selectionAngle"; type: "double"; isReadonly: true }
+        Property { name: "triggerMode"; type: "int" }
+        Property { name: "title"; type: "string" }
+        Property { name: "boundingItem"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__protectedScope"; type: "QObject"; isPointer: true }
+        Property { name: "activationMode"; type: "int" }
+        Property { name: "menuItems"; type: "QQuickMenuItem"; isList: true; isReadonly: true }
+        Property { name: "currentIndex"; type: "int"; isReadonly: true }
+        Property { name: "currentItem"; type: "QQuickMenuItem"; isReadonly: true; isPointer: true }
+        Property { name: "__mouseThief"; type: "QQuickMouseThief"; isReadonly: true; isPointer: true }
+        Method {
+            name: "popup"
+            type: "QVariant"
+            Parameter { name: "x"; type: "QVariant" }
+            Parameter { name: "y"; type: "QVariant" }
+        }
+        Method {
+            name: "addItem"
+            type: "QVariant"
+            Parameter { name: "text"; type: "QVariant" }
+        }
+        Method {
+            name: "insertItem"
+            type: "QVariant"
+            Parameter { name: "before"; type: "QVariant" }
+            Parameter { name: "text"; type: "QVariant" }
+        }
+        Method {
+            name: "removeItem"
+            type: "QVariant"
+            Parameter { name: "item"; type: "QVariant" }
+        }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
+    }
+    Component {
+        prototype: "QQuickLoader"
+        name: "QtQuick.Extras.Private/PieMenuIcon"
+        exports: ["QtQuick.Extras.Private/PieMenuIcon 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "data"
+        Property { name: "control"; type: "PieMenu_QMLTYPE_176"; isPointer: true }
+        Property { name: "styleData"; type: "QObject"; isPointer: true }
+        Property { name: "iconSource"; type: "string"; isReadonly: true }
+    }
+    Component {
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Controls/ProgressBar"
+        exports: ["QtQuick.Controls/ProgressBar 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "data"
+        Property { name: "value"; type: "double" }
+        Property { name: "minimumValue"; type: "double" }
+        Property { name: "maximumValue"; type: "double" }
+        Property { name: "indeterminate"; type: "bool" }
+        Property { name: "orientation"; type: "int" }
+        Property { name: "__initialized"; type: "bool" }
+        Property { name: "hovered"; type: "bool"; isReadonly: true }
+        Method {
+            name: "setValue"
+            type: "QVariant"
+            Parameter { name: "v"; type: "QVariant" }
         }
-        Method { name: "showPreviousMonth"; type: "QVariant" }
-        Method { name: "showNextMonth"; type: "QVariant" }
-        Method { name: "showPreviousYear"; type: "QVariant" }
-        Method { name: "showNextYear"; type: "QVariant" }
-        Method { name: "__selectPreviousMonth"; type: "QVariant" }
-        Method { name: "__selectNextMonth"; type: "QVariant" }
-        Method { name: "__selectPreviousWeek"; type: "QVariant" }
-        Method { name: "__selectNextWeek"; type: "QVariant" }
-        Method { name: "__selectFirstDayOfMonth"; type: "QVariant" }
-        Method { name: "__selectLastDayOfMonth"; type: "QVariant" }
-        Method { name: "__selectPreviousDay"; type: "QVariant" }
-        Method { name: "__selectNextDay"; type: "QVariant" }
         Property { name: "style"; type: "QQmlComponent"; isPointer: true }
         Property { name: "__style"; type: "QObject"; isPointer: true }
         Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
@@ -1324,16 +1298,11 @@
     }
     Component {
         prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/CheckBox"
-        exports: ["QtQuick.Controls/CheckBox 1.0"]
+        name: "QtQuick.Controls/RadioButton"
+        exports: ["QtQuick.Controls/RadioButton 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
         defaultProperty: "data"
-        Property { name: "checkedState"; type: "int" }
-        Property { name: "partiallyCheckedEnabled"; type: "bool" }
-        Property { name: "__ignoreChecked"; type: "bool" }
-        Property { name: "__ignoreCheckedState"; type: "bool" }
-        Method { name: "__cycleCheckBoxStates"; type: "QVariant" }
         Property { name: "checked"; type: "bool" }
         Property { name: "activeFocusOnPress"; type: "bool" }
         Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
@@ -1350,45 +1319,58 @@
     }
     Component {
         prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/ComboBox"
-        exports: ["QtQuick.Controls/ComboBox 1.0"]
+        name: "QtQuick.Controls/ScrollView"
+        exports: ["QtQuick.Controls/ScrollView 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "contentItem"
+        Property { name: "frameVisible"; type: "bool" }
+        Property { name: "highlightOnFocus"; type: "bool" }
+        Property { name: "contentItem"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__scroller"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__scrollBarTopMargin"; type: "int" }
+        Property { name: "__viewTopMargin"; type: "int" }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "Style_QMLTYPE_2"; isPointer: true }
+        Property { name: "horizontalScrollBarPolicy"; type: "int" }
+        Property { name: "verticalScrollBarPolicy"; type: "int" }
+        Property { name: "viewport"; type: "QQuickItem"; isReadonly: true; isPointer: true }
+        Property { name: "flickableItem"; type: "QQuickFlickable"; isReadonly: true; isPointer: true }
+        Property { name: "__wheelAreaScrollSpeed"; type: "double" }
+        Property {
+            name: "__horizontalScrollBar"
+            type: "ScrollBar_QMLTYPE_25"
+            isReadonly: true
+            isPointer: true
+        }
+        Property {
+            name: "__verticalScrollBar"
+            type: "ScrollBar_QMLTYPE_25"
+            isReadonly: true
+            isPointer: true
+        }
+    }
+    Component {
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Controls/Slider"
+        exports: ["QtQuick.Controls/Slider 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
         defaultProperty: "data"
-        Property { name: "textRole"; type: "string" }
-        Property { name: "editable"; type: "bool" }
+        Property { name: "orientation"; type: "int" }
+        Property { name: "updateValueWhileDragging"; type: "bool" }
         Property { name: "activeFocusOnPress"; type: "bool" }
+        Property { name: "tickmarksEnabled"; type: "bool" }
+        Property { name: "__horizontal"; type: "bool" }
+        Property { name: "__handlePos"; type: "double" }
+        Property { name: "minimumValue"; type: "double" }
+        Property { name: "maximumValue"; type: "double" }
         Property { name: "pressed"; type: "bool"; isReadonly: true }
         Property { name: "hovered"; type: "bool"; isReadonly: true }
-        Property { name: "menu"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "selectByMouse"; type: "bool" }
-        Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
-        Property { name: "__popup"; type: "QVariant" }
-        Property { name: "model"; type: "QVariant" }
-        Property { name: "currentIndex"; type: "int" }
-        Property { name: "currentText"; type: "string"; isReadonly: true }
-        Property { name: "editText"; type: "string" }
-        Property { name: "count"; type: "int"; isReadonly: true }
-        Property { name: "validator"; type: "QValidator"; isPointer: true }
-        Property { name: "acceptableInput"; type: "bool"; isReadonly: true }
-        Signal { name: "accepted" }
-        Signal {
-            name: "activated"
-            Parameter { name: "index"; type: "int" }
-        }
-        Method {
-            name: "textAt"
-            type: "QVariant"
-            Parameter { name: "index"; type: "QVariant" }
-        }
-        Method {
-            name: "find"
-            type: "QVariant"
-            Parameter { name: "text"; type: "QVariant" }
-        }
-        Method { name: "selectAll"; type: "QVariant" }
-        Method { name: "__selectPrevItem"; type: "QVariant" }
-        Method { name: "__selectNextItem"; type: "QVariant" }
+        Property { name: "stepSize"; type: "double" }
+        Property { name: "value"; type: "double" }
+        Method { name: "accessibleIncreaseAction"; type: "QVariant" }
+        Method { name: "accessibleDecreaseAction"; type: "QVariant" }
         Property { name: "style"; type: "QQmlComponent"; isPointer: true }
         Property { name: "__style"; type: "QObject"; isPointer: true }
         Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
@@ -1397,153 +1379,197 @@
     }
     Component {
         prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/GroupBox"
-        exports: ["QtQuick.Controls/GroupBox 1.0"]
+        name: "QtQuick.Controls/SpinBox"
+        exports: ["QtQuick.Controls/SpinBox 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
-        defaultProperty: "__content"
-        Property { name: "title"; type: "string" }
-        Property { name: "flat"; type: "bool" }
-        Property { name: "checkable"; type: "bool" }
+        defaultProperty: "data"
+        Property { name: "activeFocusOnPress"; type: "bool" }
+        Property { name: "horizontalAlignment"; type: "int" }
+        Property { name: "hovered"; type: "bool"; isReadonly: true }
+        Property { name: "selectByMouse"; type: "bool" }
+        Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
+        Property { name: "menu"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "value"; type: "double" }
+        Property { name: "minimumValue"; type: "double" }
+        Property { name: "maximumValue"; type: "double" }
+        Property { name: "stepSize"; type: "double" }
+        Property { name: "suffix"; type: "string" }
+        Property { name: "prefix"; type: "string" }
+        Property { name: "decimals"; type: "int" }
+        Property { name: "font"; type: "QFont" }
+        Property { name: "__text"; type: "string" }
+        Property { name: "__baselineOffset"; type: "double" }
+        Signal { name: "editingFinished" }
+        Method { name: "__increment"; type: "QVariant" }
+        Method { name: "__decrement"; type: "QVariant" }
         Property { name: "style"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "checked"; type: "bool" }
-        Property { name: "__content"; type: "QObject"; isList: true; isReadonly: true }
-        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
-        Property { name: "__checkbox"; type: "CheckBox_QMLTYPE_75"; isReadonly: true; isPointer: true }
-        Property { name: "__style"; type: "QObject"; isReadonly: true; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
     }
     Component {
-        prototype: "QQuickText"
-        name: "QtQuick.Controls/Label"
-        exports: ["QtQuick.Controls/Label 1.0"]
+        prototype: "QQuickItem"
+        name: "QtQuick.Controls/SplitView"
+        exports: ["QtQuick.Controls/SplitView 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
-        defaultProperty: "data"
+        defaultProperty: "__contents"
+        Property { name: "orientation"; type: "int" }
+        Property { name: "handleDelegate"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "resizing"; type: "bool" }
+        Property { name: "__contents"; type: "QObject"; isList: true; isReadonly: true }
+        Property { name: "__items"; type: "QQuickItem"; isList: true; isReadonly: true }
+        Property { name: "__handles"; type: "QQuickItem"; isList: true; isReadonly: true }
+        Method {
+            name: "addItem"
+            type: "QVariant"
+            Parameter { name: "item"; type: "QVariant" }
+        }
+        Method {
+            name: "removeItem"
+            type: "QVariant"
+            Parameter { name: "item"; type: "QVariant" }
+        }
     }
     Component {
-        prototype: "QObject"
-        name: "QtQuick.Controls/Menu"
-        exports: ["QtQuick.Controls/Menu 1.0"]
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Controls/StackView"
+        exports: ["QtQuick.Controls/StackView 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
-        defaultProperty: "items"
-        Property { name: "__selfComponent"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "__usingDefaultStyle"; type: "bool" }
-        Property { name: "__currentIndex"; type: "int" }
-        Property { name: "__parentContentItem"; type: "QVariant" }
+        defaultProperty: "data"
+        Property { name: "busy"; type: "bool"; isReadonly: true }
+        Property { name: "delegate"; type: "StackViewDelegate_QMLTYPE_233"; isPointer: true }
+        Property { name: "__currentItem"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__depth"; type: "int" }
+        Property { name: "__guard"; type: "bool" }
+        Property { name: "invalidItemReplacement"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "initialItem"; type: "QVariant" }
+        Property { name: "__currentTransition"; type: "QVariant" }
+        Property { name: "depth"; type: "int"; isReadonly: true }
+        Property { name: "currentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
         Method {
-            name: "addMenu"
+            name: "push"
             type: "QVariant"
-            Parameter { name: "title"; type: "QVariant" }
+            Parameter { name: "item"; type: "QVariant" }
         }
         Method {
-            name: "insertMenu"
+            name: "pop"
+            type: "QVariant"
+            Parameter { name: "item"; type: "QVariant" }
+        }
+        Method { name: "clear"; type: "QVariant" }
+        Method {
+            name: "find"
+            type: "QVariant"
+            Parameter { name: "func"; type: "QVariant" }
+            Parameter { name: "onlySearchLoadedItems"; type: "QVariant" }
+        }
+        Method {
+            name: "get"
             type: "QVariant"
             Parameter { name: "index"; type: "QVariant" }
-            Parameter { name: "title"; type: "QVariant" }
+            Parameter { name: "dontLoad"; type: "QVariant" }
         }
-        Property { name: "title"; type: "string" }
-        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
-        Property { name: "__selectedIndex"; type: "int" }
-        Property { name: "__popupVisible"; type: "bool"; isReadonly: true }
-        Property { name: "__contentItem"; type: "QQuickItem"; isPointer: true }
-        Property { name: "__minimumWidth"; type: "int" }
-        Property { name: "__font"; type: "QFont" }
-        Property { name: "__xOffset"; type: "double" }
-        Property { name: "__yOffset"; type: "double" }
-        Property { name: "__action"; type: "QQuickAction"; isReadonly: true; isPointer: true }
-        Property { name: "__popupGeometry"; type: "QRect"; isReadonly: true }
-        Signal { name: "__menuClosed" }
-        Signal { name: "popupVisibleChanged" }
-        Signal { name: "menuContentItemChanged" }
-        Signal { name: "minimumWidthChanged" }
-        Method { name: "__closeMenu" }
-        Method { name: "__dismissMenu" }
-        Method { name: "popup" }
+        Method { name: "completeTransition"; type: "QVariant" }
         Method {
-            name: "addItem"
-            type: "QQuickMenuItem*"
-            Parameter { type: "string" }
+            name: "replace"
+            type: "QVariant"
+            Parameter { name: "item"; type: "QVariant" }
+            Parameter { name: "properties"; type: "QVariant" }
+            Parameter { name: "immediate"; type: "QVariant" }
         }
         Method {
-            name: "insertItem"
-            type: "QQuickMenuItem*"
-            Parameter { type: "int" }
-            Parameter { type: "string" }
+            name: "__recursionGuard"
+            type: "QVariant"
+            Parameter { name: "use"; type: "QVariant" }
         }
-        Method { name: "addSeparator" }
         Method {
-            name: "insertSeparator"
-            Parameter { type: "int" }
+            name: "__loadElement"
+            type: "QVariant"
+            Parameter { name: "element"; type: "QVariant" }
         }
         Method {
-            name: "removeItem"
-            Parameter { type: "QQuickMenuBase"; isPointer: true }
+            name: "__resolveComponent"
+            type: "QVariant"
+            Parameter { name: "unknownObjectType"; type: "QVariant" }
+            Parameter { name: "element"; type: "QVariant" }
         }
-        Method { name: "clear" }
         Method {
-            name: "__popup"
-            Parameter { name: "targetRect"; type: "QRectF" }
-            Parameter { name: "atItemIndex"; type: "int" }
-            Parameter { name: "menuType"; type: "MenuType" }
+            name: "__cleanup"
+            type: "QVariant"
+            Parameter { name: "element"; type: "QVariant" }
+        }
+        Method {
+            name: "__setStatus"
+            type: "QVariant"
+            Parameter { name: "item"; type: "QVariant" }
+            Parameter { name: "status"; type: "QVariant" }
         }
         Method {
-            name: "__popup"
-            Parameter { name: "targetRect"; type: "QRectF" }
-            Parameter { name: "atItemIndex"; type: "int" }
+            name: "__performTransition"
+            type: "QVariant"
+            Parameter { name: "transition"; type: "QVariant" }
         }
+        Method { name: "animationFinished"; type: "QVariant" }
+    }
+    Component {
+        prototype: "QObject"
+        name: "QtQuick.Controls/StackViewDelegate"
+        exports: ["QtQuick.Controls/StackViewDelegate 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        Property { name: "pushTransition"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "popTransition"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "replaceTransition"; type: "QQmlComponent"; isPointer: true }
         Method {
-            name: "__popup"
-            Parameter { name: "targetRect"; type: "QRectF" }
+            name: "getTransition"
+            type: "QVariant"
+            Parameter { name: "properties"; type: "QVariant" }
+        }
+        Method {
+            name: "transitionFinished"
+            type: "QVariant"
+            Parameter { name: "properties"; type: "QVariant" }
         }
-        Property { name: "enabled"; type: "bool" }
-        Property { name: "iconSource"; type: "QUrl" }
-        Property { name: "iconName"; type: "string" }
-        Property { name: "__icon"; type: "QVariant"; isReadonly: true }
-        Signal { name: "__textChanged" }
-        Property { name: "visible"; type: "bool" }
-        Property { name: "type"; type: "QQuickMenuItemType::MenuItemType"; isReadonly: true }
-        Property { name: "__parentMenu"; type: "QObject"; isReadonly: true; isPointer: true }
-        Property { name: "__isNative"; type: "bool"; isReadonly: true }
-        Property { name: "__visualItem"; type: "QQuickItem"; isPointer: true }
     }
     Component {
-        prototype: "QObject"
-        name: "QtQuick.Controls/MenuBar"
-        exports: ["QtQuick.Controls/MenuBar 1.0"]
+        prototype: "QQuickParallelAnimation"
+        name: "QtQuick.Controls/StackViewTransition"
+        exports: ["QtQuick.Controls/StackViewTransition 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
-        defaultProperty: "menus"
-        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "__style"; type: "QObject"; isPointer: true }
-        Property { name: "__menuBarComponent"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "menus"; type: "QQuickMenu"; isList: true; isReadonly: true }
-        Property { name: "__contentItem"; type: "QQuickItem"; isPointer: true }
-        Property { name: "__parentWindow"; type: "QQuickWindow"; isPointer: true }
-        Property { name: "__isNative"; type: "bool" }
-        Signal { name: "nativeChanged" }
-        Signal { name: "contentItemChanged" }
+        defaultProperty: "animations"
+        Property { name: "name"; type: "string" }
+        Property { name: "enterItem"; type: "QQuickItem"; isPointer: true }
+        Property { name: "exitItem"; type: "QQuickItem"; isPointer: true }
+        Property { name: "immediate"; type: "bool" }
     }
     Component {
         prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/ProgressBar"
-        exports: ["QtQuick.Controls/ProgressBar 1.0"]
+        name: "QtQuick.Controls/StatusBar"
+        exports: ["QtQuick.Controls/StatusBar 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
+        defaultProperty: "__content"
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isReadonly: true; isPointer: true }
+        Property { name: "__content"; type: "QObject"; isList: true; isReadonly: true }
+        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
+    }
+    Component {
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Extras/StatusIndicator"
+        exports: ["QtQuick.Extras/StatusIndicator 1.1"]
+        exportMetaObjectRevisions: [1]
+        isComposite: true
         defaultProperty: "data"
-        Property { name: "value"; type: "double" }
-        Property { name: "minimumValue"; type: "double" }
-        Property { name: "maximumValue"; type: "double" }
-        Property { name: "indeterminate"; type: "bool" }
-        Property { name: "orientation"; type: "int" }
-        Property { name: "__initialized"; type: "bool" }
-        Property { name: "hovered"; type: "bool"; isReadonly: true }
-        Method {
-            name: "setValue"
-            type: "QVariant"
-            Parameter { name: "v"; type: "QVariant" }
-        }
+        Property { name: "active"; type: "bool" }
+        Property { name: "color"; type: "QColor" }
+        Property { name: "on"; type: "bool" }
         Property { name: "style"; type: "QQmlComponent"; isPointer: true }
         Property { name: "__style"; type: "QObject"; isPointer: true }
         Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
@@ -1552,18 +1578,15 @@
     }
     Component {
         prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/RadioButton"
-        exports: ["QtQuick.Controls/RadioButton 1.0"]
-        exportMetaObjectRevisions: [0]
+        name: "QtQuick.Controls/Switch"
+        exports: ["QtQuick.Controls/Switch 1.1"]
+        exportMetaObjectRevisions: [1]
         isComposite: true
         defaultProperty: "data"
         Property { name: "checked"; type: "bool" }
         Property { name: "activeFocusOnPress"; type: "bool" }
         Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
-        Property { name: "text"; type: "string" }
-        Property { name: "__cycleStatesHandler"; type: "QVariant" }
-        Property { name: "pressed"; type: "bool" }
-        Property { name: "hovered"; type: "bool"; isReadonly: true }
+        Property { name: "pressed"; type: "bool"; isReadonly: true }
         Signal { name: "clicked" }
         Property { name: "style"; type: "QQmlComponent"; isPointer: true }
         Property { name: "__style"; type: "QObject"; isPointer: true }
@@ -1572,12 +1595,170 @@
         Property { name: "__styleData"; type: "QObject"; isPointer: true }
     }
     Component {
+        prototype: "QQuickLoader"
+        name: "QtQuick.Controls/Tab"
+        exports: ["QtQuick.Controls/Tab 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "component"
+        Property { name: "title"; type: "string" }
+        Property { name: "__inserted"; type: "bool" }
+        Property { name: "component"; type: "QQmlComponent"; isPointer: true }
+    }
+    Component {
         prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/ScrollView"
-        exports: ["QtQuick.Controls/ScrollView 1.0"]
+        name: "QtQuick.Controls/TabView"
+        exports: ["QtQuick.Controls/TabView 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
-        defaultProperty: "contentItem"
+        defaultProperty: "data"
+        Property { name: "currentIndex"; type: "int" }
+        Property { name: "count"; type: "int"; isReadonly: true }
+        Property { name: "frameVisible"; type: "bool" }
+        Property { name: "tabsVisible"; type: "bool" }
+        Property { name: "tabPosition"; type: "int" }
+        Property { name: "__tabs"; type: "QQmlListModel"; isPointer: true }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__styleItem"; type: "QVariant" }
+        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
+        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
+        Method {
+            name: "addTab"
+            type: "QVariant"
+            Parameter { name: "title"; type: "QVariant" }
+            Parameter { name: "component"; type: "QVariant" }
+        }
+        Method {
+            name: "insertTab"
+            type: "QVariant"
+            Parameter { name: "index"; type: "QVariant" }
+            Parameter { name: "title"; type: "QVariant" }
+            Parameter { name: "component"; type: "QVariant" }
+        }
+        Method {
+            name: "removeTab"
+            type: "QVariant"
+            Parameter { name: "index"; type: "QVariant" }
+        }
+        Method {
+            name: "moveTab"
+            type: "QVariant"
+            Parameter { name: "from"; type: "QVariant" }
+            Parameter { name: "to"; type: "QVariant" }
+        }
+        Method {
+            name: "getTab"
+            type: "QVariant"
+            Parameter { name: "index"; type: "QVariant" }
+        }
+        Method {
+            name: "__willRemoveIndex"
+            type: "QVariant"
+            Parameter { name: "index"; type: "QVariant" }
+        }
+        Method {
+            name: "__didInsertIndex"
+            type: "QVariant"
+            Parameter { name: "index"; type: "QVariant" }
+        }
+        Method { name: "__setOpacities"; type: "QVariant" }
+    }
+    Component {
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Controls/TableView"
+        exports: ["QtQuick.Controls/TableView 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "__columns"
+        Property { name: "rowCount"; type: "int"; isReadonly: true }
+        Property { name: "model"; type: "QVariant" }
+        Property { name: "currentRow"; type: "int" }
+        Property {
+            name: "selection"
+            type: "TableViewSelection_QMLTYPE_265"
+            isReadonly: true
+            isPointer: true
+        }
+        Signal {
+            name: "activated"
+            Parameter { name: "row"; type: "int" }
+        }
+        Signal {
+            name: "clicked"
+            Parameter { name: "row"; type: "int" }
+        }
+        Signal {
+            name: "doubleClicked"
+            Parameter { name: "row"; type: "int" }
+        }
+        Signal {
+            name: "pressAndHold"
+            Parameter { name: "row"; type: "int" }
+        }
+        Method {
+            name: "positionViewAtRow"
+            type: "QVariant"
+            Parameter { name: "row"; type: "QVariant" }
+            Parameter { name: "mode"; type: "QVariant" }
+        }
+        Method {
+            name: "rowAt"
+            type: "QVariant"
+            Parameter { name: "x"; type: "QVariant" }
+            Parameter { name: "y"; type: "QVariant" }
+        }
+        Property { name: "alternatingRowColors"; type: "bool" }
+        Property { name: "headerVisible"; type: "bool" }
+        Property { name: "itemDelegate"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "rowDelegate"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "headerDelegate"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "sortIndicatorColumn"; type: "int" }
+        Property { name: "sortIndicatorVisible"; type: "bool" }
+        Property { name: "sortIndicatorOrder"; type: "int" }
+        Property { name: "selectionMode"; type: "int" }
+        Property { name: "__viewTypeName"; type: "string" }
+        Property { name: "__isTreeView"; type: "bool"; isReadonly: true }
+        Property { name: "__itemDelegateLoader"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__activateItemOnSingleClick"; type: "bool" }
+        Property { name: "__mouseArea"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__model"; type: "QVariant" }
+        Property { name: "backgroundVisible"; type: "bool" }
+        Property { name: "contentHeader"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "contentFooter"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "columnCount"; type: "int"; isReadonly: true }
+        Property { name: "section"; type: "QQuickViewSection"; isReadonly: true; isPointer: true }
+        Property { name: "__columns"; type: "QObject"; isList: true; isReadonly: true }
+        Property { name: "__currentRowItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
+        Property { name: "__currentRow"; type: "int" }
+        Property { name: "__listView"; type: "QQuickListView"; isReadonly: true; isPointer: true }
+        Method {
+            name: "addColumn"
+            type: "QVariant"
+            Parameter { name: "column"; type: "QVariant" }
+        }
+        Method {
+            name: "insertColumn"
+            type: "QVariant"
+            Parameter { name: "index"; type: "QVariant" }
+            Parameter { name: "column"; type: "QVariant" }
+        }
+        Method {
+            name: "removeColumn"
+            type: "QVariant"
+            Parameter { name: "index"; type: "QVariant" }
+        }
+        Method {
+            name: "moveColumn"
+            type: "QVariant"
+            Parameter { name: "from"; type: "QVariant" }
+            Parameter { name: "to"; type: "QVariant" }
+        }
+        Method {
+            name: "getColumn"
+            type: "QVariant"
+            Parameter { name: "index"; type: "QVariant" }
+        }
+        Method { name: "resizeColumnsToContents"; type: "QVariant" }
         Property { name: "frameVisible"; type: "bool" }
         Property { name: "highlightOnFocus"; type: "bool" }
         Property { name: "contentItem"; type: "QQuickItem"; isPointer: true }
@@ -1605,222 +1786,336 @@
         }
     }
     Component {
-        prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/Slider"
-        exports: ["QtQuick.Controls/Slider 1.0"]
+        prototype: "QObject"
+        name: "QtQuick.Controls/TableViewColumn"
+        exports: ["QtQuick.Controls/TableViewColumn 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
-        defaultProperty: "data"
-        Property { name: "orientation"; type: "int" }
-        Property { name: "updateValueWhileDragging"; type: "bool" }
-        Property { name: "activeFocusOnPress"; type: "bool" }
-        Property { name: "tickmarksEnabled"; type: "bool" }
-        Property { name: "__horizontal"; type: "bool" }
-        Property { name: "__handlePos"; type: "double" }
-        Property { name: "minimumValue"; type: "double" }
-        Property { name: "maximumValue"; type: "double" }
-        Property { name: "pressed"; type: "bool"; isReadonly: true }
-        Property { name: "hovered"; type: "bool"; isReadonly: true }
-        Property { name: "stepSize"; type: "double" }
-        Property { name: "value"; type: "double" }
-        Method { name: "accessibleIncreaseAction"; type: "QVariant" }
-        Method { name: "accessibleDecreaseAction"; type: "QVariant" }
-        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "__style"; type: "QObject"; isPointer: true }
-        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
-        Property { name: "styleHints"; type: "QVariant" }
-        Property { name: "__styleData"; type: "QObject"; isPointer: true }
+        Property { name: "__view"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__index"; type: "int" }
+        Property { name: "title"; type: "string" }
+        Property { name: "role"; type: "string" }
+        Property { name: "width"; type: "int" }
+        Property { name: "visible"; type: "bool" }
+        Property { name: "resizable"; type: "bool" }
+        Property { name: "movable"; type: "bool" }
+        Property { name: "elideMode"; type: "int" }
+        Property { name: "horizontalAlignment"; type: "int" }
+        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
+        Method { name: "resizeToContents"; type: "QVariant" }
     }
     Component {
         prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/SpinBox"
-        exports: ["QtQuick.Controls/SpinBox 1.0"]
-        exportMetaObjectRevisions: [0]
+        name: "QtQuick.Controls/TextArea"
+        exports: ["QtQuick.Controls/TextArea 1.3"]
+        exportMetaObjectRevisions: [3]
         isComposite: true
         defaultProperty: "data"
-        Property { name: "activeFocusOnPress"; type: "bool" }
-        Property { name: "horizontalAlignment"; type: "int" }
-        Property { name: "hovered"; type: "bool"; isReadonly: true }
-        Property { name: "selectByMouse"; type: "bool" }
         Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
+        Property { name: "tabChangesFocus"; type: "bool" }
+        Property { name: "selectByMouse"; type: "bool" }
         Property { name: "menu"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "value"; type: "double" }
-        Property { name: "minimumValue"; type: "double" }
-        Property { name: "maximumValue"; type: "double" }
-        Property { name: "stepSize"; type: "double" }
-        Property { name: "suffix"; type: "string" }
-        Property { name: "prefix"; type: "string" }
-        Property { name: "decimals"; type: "int" }
+        Property { name: "activeFocusOnPress"; type: "bool" }
+        Property { name: "baseUrl"; type: "QUrl" }
+        Property { name: "canPaste"; type: "bool"; isReadonly: true }
+        Property { name: "canRedo"; type: "bool"; isReadonly: true }
+        Property { name: "canUndo"; type: "bool"; isReadonly: true }
+        Property { name: "textColor"; type: "QColor" }
+        Property { name: "cursorPosition"; type: "int" }
+        Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true }
         Property { name: "font"; type: "QFont" }
-        Property { name: "__text"; type: "string" }
-        Property { name: "__baselineOffset"; type: "double" }
-        Signal { name: "editingFinished" }
-        Method { name: "__increment"; type: "QVariant" }
-        Method { name: "__decrement"; type: "QVariant" }
-        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "__style"; type: "QObject"; isPointer: true }
-        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
-        Property { name: "styleHints"; type: "QVariant" }
-        Property { name: "__styleData"; type: "QObject"; isPointer: true }
-    }
-    Component {
-        prototype: "QQuickItem"
-        name: "QtQuick.Controls/SplitView"
-        exports: ["QtQuick.Controls/SplitView 1.0"]
-        exportMetaObjectRevisions: [0]
-        isComposite: true
-        defaultProperty: "__contents"
-        Property { name: "orientation"; type: "int" }
-        Property { name: "handleDelegate"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "resizing"; type: "bool" }
-        Property { name: "__contents"; type: "QObject"; isList: true; isReadonly: true }
-        Property { name: "__items"; type: "QQuickItem"; isList: true; isReadonly: true }
-        Property { name: "__handles"; type: "QQuickItem"; isList: true; isReadonly: true }
+        Property { name: "horizontalAlignment"; type: "int" }
+        Property { name: "effectiveHorizontalAlignment"; type: "int"; isReadonly: true }
+        Property { name: "verticalAlignment"; type: "int" }
+        Property { name: "inputMethodHints"; type: "int" }
+        Property { name: "length"; type: "int"; isReadonly: true }
+        Property { name: "lineCount"; type: "int"; isReadonly: true }
+        Property { name: "readOnly"; type: "bool" }
+        Property { name: "selectedText"; type: "string"; isReadonly: true }
+        Property { name: "selectionEnd"; type: "int"; isReadonly: true }
+        Property { name: "selectionStart"; type: "int"; isReadonly: true }
+        Property { name: "text"; type: "string" }
+        Property { name: "textFormat"; type: "int" }
+        Property { name: "wrapMode"; type: "int" }
+        Property { name: "selectByKeyboard"; type: "bool" }
+        Property { name: "hoveredLink"; type: "string"; isReadonly: true }
+        Property { name: "backgroundVisible"; type: "bool" }
+        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
+        Property { name: "textMargin"; type: "double" }
+        Property { name: "contentWidth"; type: "double"; isReadonly: true }
+        Property { name: "contentHeight"; type: "double"; isReadonly: true }
+        Property { name: "textDocument"; type: "QQuickTextDocument"; isReadonly: true; isPointer: true }
+        Signal {
+            name: "linkActivated"
+            Parameter { name: "link"; type: "string" }
+        }
+        Signal {
+            name: "linkHovered"
+            Parameter { name: "link"; type: "string" }
+        }
         Method {
-            name: "addItem"
+            name: "append"
             type: "QVariant"
-            Parameter { name: "item"; type: "QVariant" }
+            Parameter { name: "string"; type: "QVariant" }
         }
-    }
-    Component {
-        prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/StackView"
-        exports: ["QtQuick.Controls/StackView 1.0"]
-        exportMetaObjectRevisions: [0]
-        isComposite: true
-        defaultProperty: "data"
-        Property { name: "busy"; type: "bool"; isReadonly: true }
-        Property { name: "delegate"; type: "StackViewDelegate_QMLTYPE_167"; isPointer: true }
-        Property { name: "__currentItem"; type: "QQuickItem"; isPointer: true }
-        Property { name: "__depth"; type: "int" }
-        Property { name: "__guard"; type: "bool" }
-        Property { name: "invalidItemReplacement"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "initialItem"; type: "QVariant" }
-        Property { name: "__currentTransition"; type: "QVariant" }
-        Property { name: "depth"; type: "int"; isReadonly: true }
-        Property { name: "currentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
+        Method { name: "copy"; type: "QVariant" }
+        Method { name: "cut"; type: "QVariant" }
+        Method { name: "deselect"; type: "QVariant" }
         Method {
-            name: "push"
+            name: "getFormattedText"
             type: "QVariant"
-            Parameter { name: "item"; type: "QVariant" }
+            Parameter { name: "start"; type: "QVariant" }
+            Parameter { name: "end"; type: "QVariant" }
         }
         Method {
-            name: "pop"
+            name: "getText"
             type: "QVariant"
-            Parameter { name: "item"; type: "QVariant" }
+            Parameter { name: "start"; type: "QVariant" }
+            Parameter { name: "end"; type: "QVariant" }
         }
-        Method { name: "clear"; type: "QVariant" }
         Method {
-            name: "find"
+            name: "insert"
             type: "QVariant"
-            Parameter { name: "func"; type: "QVariant" }
-            Parameter { name: "onlySearchLoadedItems"; type: "QVariant" }
+            Parameter { name: "position"; type: "QVariant" }
+            Parameter { name: "text"; type: "QVariant" }
         }
         Method {
-            name: "get"
+            name: "isRightToLeft"
             type: "QVariant"
-            Parameter { name: "index"; type: "QVariant" }
-            Parameter { name: "dontLoad"; type: "QVariant" }
+            Parameter { name: "start"; type: "QVariant" }
+            Parameter { name: "end"; type: "QVariant" }
         }
-        Method { name: "completeTransition"; type: "QVariant" }
         Method {
-            name: "replace"
+            name: "moveCursorSelection"
             type: "QVariant"
-            Parameter { name: "item"; type: "QVariant" }
-            Parameter { name: "properties"; type: "QVariant" }
-            Parameter { name: "immediate"; type: "QVariant" }
+            Parameter { name: "position"; type: "QVariant" }
+            Parameter { name: "mode"; type: "QVariant" }
         }
+        Method { name: "paste"; type: "QVariant" }
         Method {
-            name: "__recursionGuard"
+            name: "positionAt"
             type: "QVariant"
-            Parameter { name: "use"; type: "QVariant" }
+            Parameter { name: "x"; type: "QVariant" }
+            Parameter { name: "y"; type: "QVariant" }
+        }
+        Method {
+            name: "positionToRectangle"
+            type: "QVariant"
+            Parameter { name: "position"; type: "QVariant" }
+        }
+        Method { name: "redo"; type: "QVariant" }
+        Method {
+            name: "remove"
+            type: "QVariant"
+            Parameter { name: "start"; type: "QVariant" }
+            Parameter { name: "end"; type: "QVariant" }
         }
         Method {
-            name: "__loadElement"
+            name: "select"
+            type: "QVariant"
+            Parameter { name: "start"; type: "QVariant" }
+            Parameter { name: "end"; type: "QVariant" }
+        }
+        Method { name: "selectAll"; type: "QVariant" }
+        Method { name: "selectWord"; type: "QVariant" }
+        Method { name: "undo"; type: "QVariant" }
+        Property { name: "frameVisible"; type: "bool" }
+        Property { name: "highlightOnFocus"; type: "bool" }
+        Property { name: "contentItem"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__scroller"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__scrollBarTopMargin"; type: "int" }
+        Property { name: "__viewTopMargin"; type: "int" }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "Style_QMLTYPE_2"; isPointer: true }
+        Property { name: "horizontalScrollBarPolicy"; type: "int" }
+        Property { name: "verticalScrollBarPolicy"; type: "int" }
+        Property { name: "viewport"; type: "QQuickItem"; isReadonly: true; isPointer: true }
+        Property { name: "flickableItem"; type: "QQuickFlickable"; isReadonly: true; isPointer: true }
+        Property { name: "__wheelAreaScrollSpeed"; type: "double" }
+        Property {
+            name: "__horizontalScrollBar"
+            type: "ScrollBar_QMLTYPE_25"
+            isReadonly: true
+            isPointer: true
+        }
+        Property {
+            name: "__verticalScrollBar"
+            type: "ScrollBar_QMLTYPE_25"
+            isReadonly: true
+            isPointer: true
+        }
+    }
+    Component {
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Controls/TextField"
+        exports: ["QtQuick.Controls/TextField 1.0"]
+        exportMetaObjectRevisions: [0]
+        isComposite: true
+        defaultProperty: "data"
+        Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
+        Property { name: "selectByMouse"; type: "bool" }
+        Property { name: "menu"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "acceptableInput"; type: "bool"; isReadonly: true }
+        Property { name: "activeFocusOnPress"; type: "bool" }
+        Property { name: "canPaste"; type: "bool"; isReadonly: true }
+        Property { name: "canRedo"; type: "bool"; isReadonly: true }
+        Property { name: "canUndo"; type: "bool"; isReadonly: true }
+        Property { name: "textColor"; type: "QColor" }
+        Property { name: "cursorPosition"; type: "int" }
+        Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true }
+        Property { name: "displayText"; type: "string"; isReadonly: true }
+        Property { name: "echoMode"; type: "int" }
+        Property { name: "font"; type: "QFont" }
+        Property { name: "horizontalAlignment"; type: "int" }
+        Property { name: "effectiveHorizontalAlignment"; type: "int"; isReadonly: true }
+        Property { name: "verticalAlignment"; type: "int" }
+        Property { name: "inputMask"; type: "string" }
+        Property { name: "inputMethodHints"; type: "int" }
+        Property { name: "length"; type: "int"; isReadonly: true }
+        Property { name: "maximumLength"; type: "int" }
+        Property { name: "placeholderText"; type: "string" }
+        Property { name: "readOnly"; type: "bool" }
+        Property { name: "selectedText"; type: "string"; isReadonly: true }
+        Property { name: "selectionEnd"; type: "int"; isReadonly: true }
+        Property { name: "selectionStart"; type: "int"; isReadonly: true }
+        Property { name: "text"; type: "string" }
+        Property { name: "validator"; type: "QValidator"; isPointer: true }
+        Property { name: "hovered"; type: "bool"; isReadonly: true }
+        Property { name: "__contentHeight"; type: "double"; isReadonly: true }
+        Property { name: "__contentWidth"; type: "double"; isReadonly: true }
+        Property { name: "__baselineOffset"; type: "double" }
+        Signal { name: "accepted" }
+        Signal { name: "editingFinished" }
+        Method { name: "copy"; type: "QVariant" }
+        Method { name: "cut"; type: "QVariant" }
+        Method { name: "deselect"; type: "QVariant" }
+        Method {
+            name: "getText"
             type: "QVariant"
-            Parameter { name: "element"; type: "QVariant" }
+            Parameter { name: "start"; type: "QVariant" }
+            Parameter { name: "end"; type: "QVariant" }
         }
         Method {
-            name: "__resolveComponent"
+            name: "insert"
             type: "QVariant"
-            Parameter { name: "unknownObjectType"; type: "QVariant" }
-            Parameter { name: "element"; type: "QVariant" }
+            Parameter { name: "position"; type: "QVariant" }
+            Parameter { name: "text"; type: "QVariant" }
         }
         Method {
-            name: "__cleanup"
+            name: "isRightToLeft"
             type: "QVariant"
-            Parameter { name: "element"; type: "QVariant" }
+            Parameter { name: "start"; type: "QVariant" }
+            Parameter { name: "end"; type: "QVariant" }
         }
+        Method { name: "paste"; type: "QVariant" }
+        Method { name: "redo"; type: "QVariant" }
         Method {
-            name: "__setStatus"
+            name: "remove"
             type: "QVariant"
-            Parameter { name: "item"; type: "QVariant" }
-            Parameter { name: "status"; type: "QVariant" }
+            Parameter { name: "start"; type: "QVariant" }
+            Parameter { name: "end"; type: "QVariant" }
         }
         Method {
-            name: "__performTransition"
+            name: "select"
             type: "QVariant"
-            Parameter { name: "transition"; type: "QVariant" }
+            Parameter { name: "start"; type: "QVariant" }
+            Parameter { name: "end"; type: "QVariant" }
         }
-        Method { name: "animationFinished"; type: "QVariant" }
+        Method { name: "selectAll"; type: "QVariant" }
+        Method { name: "selectWord"; type: "QVariant" }
+        Method { name: "undo"; type: "QVariant" }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
     }
     Component {
-        prototype: "QObject"
-        name: "QtQuick.Controls/StackViewDelegate"
-        exports: ["QtQuick.Controls/StackViewDelegate 1.0"]
+        prototype: "QQuickText"
+        name: "QtQuick.Extras.Private/TextSingleton"
+        exports: ["QtQuick.Extras.Private/TextSingleton 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
-        Property { name: "pushTransition"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "popTransition"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "replaceTransition"; type: "QQmlComponent"; isPointer: true }
-        Method {
-            name: "getTransition"
-            type: "QVariant"
-            Parameter { name: "properties"; type: "QVariant" }
-        }
-        Method {
-            name: "transitionFinished"
-            type: "QVariant"
-            Parameter { name: "properties"; type: "QVariant" }
-        }
+        isCreatable: false
+        isSingleton: true
+        defaultProperty: "data"
     }
     Component {
-        prototype: "QQuickParallelAnimation"
-        name: "QtQuick.Controls/StackViewTransition"
-        exports: ["QtQuick.Controls/StackViewTransition 1.0"]
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Extras/ToggleButton"
+        exports: ["QtQuick.Extras/ToggleButton 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
-        defaultProperty: "animations"
-        Property { name: "name"; type: "string" }
-        Property { name: "enterItem"; type: "QQuickItem"; isPointer: true }
-        Property { name: "exitItem"; type: "QQuickItem"; isPointer: true }
-        Property { name: "immediate"; type: "bool" }
+        defaultProperty: "data"
+        Property { name: "isDefault"; type: "bool" }
+        Property { name: "menu"; type: "Menu_QMLTYPE_50"; isPointer: true }
+        Property { name: "checkable"; type: "bool" }
+        Property { name: "checked"; type: "bool" }
+        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
+        Property { name: "action"; type: "QQuickAction"; isPointer: true }
+        Property { name: "activeFocusOnPress"; type: "bool" }
+        Property { name: "text"; type: "string" }
+        Property { name: "tooltip"; type: "string" }
+        Property { name: "iconSource"; type: "QUrl" }
+        Property { name: "iconName"; type: "string" }
+        Property { name: "__position"; type: "string" }
+        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
+        Property { name: "__action"; type: "QQuickAction"; isPointer: true }
+        Property { name: "__iconAction"; type: "QQuickAction"; isReadonly: true; isPointer: true }
+        Property { name: "__effectivePressed"; type: "bool" }
+        Property { name: "__behavior"; type: "QVariant" }
+        Property { name: "pressed"; type: "bool"; isReadonly: true }
+        Property { name: "hovered"; type: "bool"; isReadonly: true }
+        Signal { name: "clicked" }
+        Method { name: "accessiblePressAction"; type: "QVariant" }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
     }
     Component {
         prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/StatusBar"
-        exports: ["QtQuick.Controls/StatusBar 1.0"]
+        name: "QtQuick.Controls/ToolBar"
+        exports: ["QtQuick.Controls/ToolBar 1.0"]
         exportMetaObjectRevisions: [0]
         isComposite: true
         defaultProperty: "__content"
         Property { name: "style"; type: "QQmlComponent"; isPointer: true }
         Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__menu"; type: "QVariant" }
         Property { name: "__style"; type: "QObject"; isReadonly: true; isPointer: true }
         Property { name: "__content"; type: "QObject"; isList: true; isReadonly: true }
         Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
     }
     Component {
         prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/Switch"
-        exports: ["QtQuick.Controls/Switch 1.1"]
-        exportMetaObjectRevisions: [1]
+        name: "QtQuick.Controls/ToolButton"
+        exports: ["QtQuick.Controls/ToolButton 1.0"]
+        exportMetaObjectRevisions: [0]
         isComposite: true
         defaultProperty: "data"
+        Property { name: "isDefault"; type: "bool" }
+        Property { name: "menu"; type: "Menu_QMLTYPE_50"; isPointer: true }
+        Property { name: "checkable"; type: "bool" }
         Property { name: "checked"; type: "bool" }
-        Property { name: "activeFocusOnPress"; type: "bool" }
         Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
+        Property { name: "action"; type: "QQuickAction"; isPointer: true }
+        Property { name: "activeFocusOnPress"; type: "bool" }
+        Property { name: "text"; type: "string" }
+        Property { name: "tooltip"; type: "string" }
+        Property { name: "iconSource"; type: "QUrl" }
+        Property { name: "iconName"; type: "string" }
+        Property { name: "__position"; type: "string" }
+        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
+        Property { name: "__action"; type: "QQuickAction"; isPointer: true }
+        Property { name: "__iconAction"; type: "QQuickAction"; isReadonly: true; isPointer: true }
+        Property { name: "__effectivePressed"; type: "bool" }
+        Property { name: "__behavior"; type: "QVariant" }
         Property { name: "pressed"; type: "bool"; isReadonly: true }
+        Property { name: "hovered"; type: "bool"; isReadonly: true }
         Signal { name: "clicked" }
+        Method { name: "accessiblePressAction"; type: "QVariant" }
         Property { name: "style"; type: "QQmlComponent"; isPointer: true }
         Property { name: "__style"; type: "QObject"; isPointer: true }
         Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
@@ -1828,136 +2123,84 @@
         Property { name: "__styleData"; type: "QObject"; isPointer: true }
     }
     Component {
-        prototype: "QQuickLoader"
-        name: "QtQuick.Controls/Tab"
-        exports: ["QtQuick.Controls/Tab 1.0"]
-        exportMetaObjectRevisions: [0]
-        isComposite: true
-        defaultProperty: "component"
-        Property { name: "title"; type: "string" }
-        Property { name: "__inserted"; type: "bool" }
-        Property { name: "component"; type: "QQmlComponent"; isPointer: true }
-    }
-    Component {
         prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/TabView"
-        exports: ["QtQuick.Controls/TabView 1.0"]
-        exportMetaObjectRevisions: [0]
+        name: "QtQuick.Controls/TreeView"
+        exports: ["QtQuick.Controls/TreeView 1.4"]
+        exportMetaObjectRevisions: [4]
         isComposite: true
-        defaultProperty: "data"
-        Property { name: "currentIndex"; type: "int" }
-        Property { name: "count"; type: "int"; isReadonly: true }
-        Property { name: "frameVisible"; type: "bool" }
-        Property { name: "tabsVisible"; type: "bool" }
-        Property { name: "tabPosition"; type: "int" }
-        Property { name: "__tabs"; type: "QQmlListModel"; isPointer: true }
-        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "__styleItem"; type: "QVariant" }
-        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
-        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
-        Method {
-            name: "addTab"
-            type: "QVariant"
-            Parameter { name: "title"; type: "QVariant" }
-            Parameter { name: "component"; type: "QVariant" }
+        defaultProperty: "__columns"
+        Property { name: "selection"; type: "QItemSelectionModel"; isPointer: true }
+        Property { name: "model"; type: "QVariant" }
+        Property { name: "currentIndex"; type: "QVariant"; isReadonly: true }
+        Signal {
+            name: "activated"
+            Parameter { name: "index"; type: "QVariant" }
         }
-        Method {
-            name: "insertTab"
-            type: "QVariant"
+        Signal {
+            name: "clicked"
             Parameter { name: "index"; type: "QVariant" }
-            Parameter { name: "title"; type: "QVariant" }
-            Parameter { name: "component"; type: "QVariant" }
         }
-        Method {
-            name: "removeTab"
-            type: "QVariant"
+        Signal {
+            name: "doubleClicked"
             Parameter { name: "index"; type: "QVariant" }
         }
-        Method {
-            name: "moveTab"
-            type: "QVariant"
-            Parameter { name: "from"; type: "QVariant" }
-            Parameter { name: "to"; type: "QVariant" }
+        Signal {
+            name: "pressAndHold"
+            Parameter { name: "index"; type: "QVariant" }
         }
-        Method {
-            name: "getTab"
-            type: "QVariant"
+        Signal {
+            name: "expanded"
+            Parameter { name: "index"; type: "QVariant" }
+        }
+        Signal {
+            name: "collapsed"
             Parameter { name: "index"; type: "QVariant" }
         }
         Method {
-            name: "__willRemoveIndex"
+            name: "isExpanded"
             type: "QVariant"
             Parameter { name: "index"; type: "QVariant" }
         }
         Method {
-            name: "__didInsertIndex"
+            name: "collapse"
             type: "QVariant"
             Parameter { name: "index"; type: "QVariant" }
         }
-        Method { name: "__setOpacities"; type: "QVariant" }
-    }
-    Component {
-        prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/TableView"
-        exports: ["QtQuick.Controls/TableView 1.0"]
-        exportMetaObjectRevisions: [0]
-        isComposite: true
-        defaultProperty: "__columns"
-        Property { name: "alternatingRowColors"; type: "bool" }
-        Property { name: "headerVisible"; type: "bool" }
-        Property { name: "itemDelegate"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "rowDelegate"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "headerDelegate"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "sortIndicatorColumn"; type: "int" }
-        Property { name: "sortIndicatorVisible"; type: "bool" }
-        Property { name: "sortIndicatorOrder"; type: "int" }
-        Property { name: "selectionMode"; type: "int" }
-        Property { name: "__activateItemOnSingleClick"; type: "bool" }
-        Property { name: "model"; type: "QVariant" }
-        Property { name: "backgroundVisible"; type: "bool" }
-        Property { name: "__columns"; type: "QObject"; isList: true; isReadonly: true }
-        Property { name: "contentHeader"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "contentFooter"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "rowCount"; type: "int"; isReadonly: true }
-        Property { name: "columnCount"; type: "int"; isReadonly: true }
-        Property { name: "section"; type: "QQuickViewSection"; isReadonly: true; isPointer: true }
-        Property { name: "currentRow"; type: "int" }
-        Property { name: "__currentRowItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
-        Property { name: "__listView"; type: "QQuickListView"; isReadonly: true; isPointer: true }
-        Property {
-            name: "selection"
-            type: "TableViewSelection_QMLTYPE_196"
-            isReadonly: true
-            isPointer: true
-        }
-        Signal {
-            name: "activated"
-            Parameter { name: "row"; type: "int" }
-        }
-        Signal {
-            name: "clicked"
-            Parameter { name: "row"; type: "int" }
-        }
-        Signal {
-            name: "doubleClicked"
-            Parameter { name: "row"; type: "int" }
-        }
-        Signal {
-            name: "pressAndHold"
-            Parameter { name: "row"; type: "int" }
-        }
         Method {
-            name: "positionViewAtRow"
+            name: "expand"
             type: "QVariant"
-            Parameter { name: "row"; type: "QVariant" }
-            Parameter { name: "mode"; type: "QVariant" }
+            Parameter { name: "index"; type: "QVariant" }
         }
         Method {
-            name: "rowAt"
+            name: "indexAt"
             type: "QVariant"
             Parameter { name: "x"; type: "QVariant" }
             Parameter { name: "y"; type: "QVariant" }
         }
+        Property { name: "alternatingRowColors"; type: "bool" }
+        Property { name: "headerVisible"; type: "bool" }
+        Property { name: "itemDelegate"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "rowDelegate"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "headerDelegate"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "sortIndicatorColumn"; type: "int" }
+        Property { name: "sortIndicatorVisible"; type: "bool" }
+        Property { name: "sortIndicatorOrder"; type: "int" }
+        Property { name: "selectionMode"; type: "int" }
+        Property { name: "__viewTypeName"; type: "string" }
+        Property { name: "__isTreeView"; type: "bool"; isReadonly: true }
+        Property { name: "__itemDelegateLoader"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__activateItemOnSingleClick"; type: "bool" }
+        Property { name: "__mouseArea"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__model"; type: "QVariant" }
+        Property { name: "backgroundVisible"; type: "bool" }
+        Property { name: "contentHeader"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "contentFooter"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "columnCount"; type: "int"; isReadonly: true }
+        Property { name: "section"; type: "QQuickViewSection"; isReadonly: true; isPointer: true }
+        Property { name: "__columns"; type: "QObject"; isList: true; isReadonly: true }
+        Property { name: "__currentRowItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
+        Property { name: "__currentRow"; type: "int" }
+        Property { name: "__listView"; type: "QQuickListView"; isReadonly: true; isPointer: true }
         Method {
             name: "addColumn"
             type: "QVariant"
@@ -1986,8 +2229,6 @@
             Parameter { name: "index"; type: "QVariant" }
         }
         Method { name: "resizeColumnsToContents"; type: "QVariant" }
-        Method { name: "__decrementCurrentIndex"; type: "QVariant" }
-        Method { name: "__incrementCurrentIndex"; type: "QVariant" }
         Property { name: "frameVisible"; type: "bool" }
         Property { name: "highlightOnFocus"; type: "bool" }
         Property { name: "contentItem"; type: "QQuickItem"; isPointer: true }
@@ -2015,290 +2256,325 @@
         }
     }
     Component {
+        prototype: "QQuickFocusScope"
+        name: "QtQuick.Extras/Tumbler"
+        exports: ["QtQuick.Extras/Tumbler 1.2"]
+        exportMetaObjectRevisions: [2]
+        isComposite: true
+        defaultProperty: "data"
+        Property { name: "__highlightMoveDuration"; type: "int" }
+        Property { name: "columnCount"; type: "int"; isReadonly: true }
+        Property { name: "__columnRow"; type: "QQuickRow"; isReadonly: true; isPointer: true }
+        Property { name: "__movementDelayTimer"; type: "QQmlTimer"; isReadonly: true; isPointer: true }
+        Method {
+            name: "__isValidColumnIndex"
+            type: "QVariant"
+            Parameter { name: "index"; type: "QVariant" }
+        }
+        Method {
+            name: "__isValidColumnAndItemIndex"
+            type: "QVariant"
+            Parameter { name: "columnIndex"; type: "QVariant" }
+            Parameter { name: "itemIndex"; type: "QVariant" }
+        }
+        Method {
+            name: "currentIndexAt"
+            type: "QVariant"
+            Parameter { name: "columnIndex"; type: "QVariant" }
+        }
+        Method {
+            name: "setCurrentIndexAt"
+            type: "QVariant"
+            Parameter { name: "columnIndex"; type: "QVariant" }
+            Parameter { name: "itemIndex"; type: "QVariant" }
+        }
+        Method {
+            name: "getColumn"
+            type: "QVariant"
+            Parameter { name: "columnIndex"; type: "QVariant" }
+        }
+        Method {
+            name: "addColumn"
+            type: "QVariant"
+            Parameter { name: "column"; type: "QVariant" }
+        }
+        Method {
+            name: "insertColumn"
+            type: "QVariant"
+            Parameter { name: "index"; type: "QVariant" }
+            Parameter { name: "column"; type: "QVariant" }
+        }
+        Method {
+            name: "__viewAt"
+            type: "QVariant"
+            Parameter { name: "index"; type: "QVariant" }
+        }
+        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "__style"; type: "QObject"; isPointer: true }
+        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
+        Property { name: "styleHints"; type: "QVariant" }
+        Property { name: "__styleData"; type: "QObject"; isPointer: true }
+    }
+    Component {
         prototype: "QObject"
-        name: "QtQuick.Controls/TableViewColumn"
-        exports: ["QtQuick.Controls/TableViewColumn 1.0"]
-        exportMetaObjectRevisions: [0]
+        name: "QtQuick.Extras/TumblerColumn"
+        exports: ["QtQuick.Extras/TumblerColumn 1.2"]
+        exportMetaObjectRevisions: [2]
         isComposite: true
-        Property { name: "__view"; type: "QQuickItem"; isPointer: true }
+        Property { name: "__tumbler"; type: "QQuickItem"; isPointer: true }
         Property { name: "__index"; type: "int" }
-        Property { name: "title"; type: "string" }
+        Property { name: "__currentIndex"; type: "int" }
         Property { name: "role"; type: "string" }
-        Property { name: "width"; type: "int" }
-        Property { name: "visible"; type: "bool" }
-        Property { name: "resizable"; type: "bool" }
-        Property { name: "movable"; type: "bool" }
-        Property { name: "elideMode"; type: "int" }
-        Property { name: "horizontalAlignment"; type: "int" }
         Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
-        Method { name: "resizeToContents"; type: "QVariant" }
+        Property { name: "highlight"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "columnForeground"; type: "QQmlComponent"; isPointer: true }
+        Property { name: "visible"; type: "bool" }
+        Property { name: "activeFocus"; type: "bool"; isReadonly: true }
+        Property { name: "width"; type: "double" }
+        Property { name: "model"; type: "QVariant" }
+        Property { name: "currentIndex"; type: "int"; isReadonly: true }
     }
+
     Component {
-        prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/TextArea"
-        exports: ["QtQuick.Controls/TextArea 1.3"]
-        exportMetaObjectRevisions: [3]
-        isComposite: true
+        name: "QQuickWindow"
         defaultProperty: "data"
-        Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
-        Property { name: "tabChangesFocus"; type: "bool" }
-        Property { name: "selectByMouse"; type: "bool" }
-        Property { name: "menu"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "activeFocusOnPress"; type: "bool" }
-        Property { name: "baseUrl"; type: "QUrl" }
-        Property { name: "canPaste"; type: "bool"; isReadonly: true }
-        Property { name: "canRedo"; type: "bool"; isReadonly: true }
-        Property { name: "canUndo"; type: "bool"; isReadonly: true }
-        Property { name: "textColor"; type: "QColor" }
-        Property { name: "cursorPosition"; type: "int" }
-        Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true }
-        Property { name: "font"; type: "QFont" }
-        Property { name: "horizontalAlignment"; type: "int" }
-        Property { name: "effectiveHorizontalAlignment"; type: "int"; isReadonly: true }
-        Property { name: "verticalAlignment"; type: "int" }
-        Property { name: "inputMethodHints"; type: "int" }
-        Property { name: "length"; type: "int"; isReadonly: true }
-        Property { name: "lineCount"; type: "int"; isReadonly: true }
-        Property { name: "readOnly"; type: "bool" }
-        Property { name: "selectedText"; type: "string"; isReadonly: true }
-        Property { name: "selectionEnd"; type: "int"; isReadonly: true }
-        Property { name: "selectionStart"; type: "int"; isReadonly: true }
-        Property { name: "text"; type: "string" }
-        Property { name: "textFormat"; type: "int" }
-        Property { name: "wrapMode"; type: "int" }
-        Property { name: "selectByKeyboard"; type: "bool" }
-        Property { name: "hoveredLink"; type: "string"; isReadonly: true }
-        Property { name: "backgroundVisible"; type: "bool" }
+        prototype: "QWindow"
+        exports: ["QtQuick.Window/Window 2.0"]
+        exportMetaObjectRevisions: [0]
+        Enum {
+            name: "SceneGraphError"
+            values: {
+                "ContextNotAvailable": 1
+            }
+        }
         Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
-        Property { name: "textMargin"; type: "double" }
-        Property { name: "contentWidth"; type: "double"; isReadonly: true }
-        Property { name: "contentHeight"; type: "double"; isReadonly: true }
-        Property { name: "textDocument"; type: "QQuickTextDocument"; isReadonly: true; isPointer: true }
+        Property { name: "color"; type: "QColor" }
+        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
+        Property {
+            name: "activeFocusItem"
+            revision: 1
+            type: "QQuickItem"
+            isReadonly: true
+            isPointer: true
+        }
+        Signal { name: "frameSwapped" }
+        Signal {
+            name: "openglContextCreated"
+            revision: 2
+            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
+        }
+        Signal { name: "sceneGraphInitialized" }
+        Signal { name: "sceneGraphInvalidated" }
+        Signal { name: "beforeSynchronizing" }
+        Signal { name: "afterSynchronizing"; revision: 2 }
+        Signal { name: "beforeRendering" }
+        Signal { name: "afterRendering" }
+        Signal { name: "afterAnimating"; revision: 2 }
+        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
+        Signal {
+            name: "closing"
+            revision: 1
+            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
+        }
+        Signal {
+            name: "colorChanged"
+            Parameter { type: "QColor" }
+        }
+        Signal { name: "activeFocusItemChanged"; revision: 1 }
+        Signal {
+            name: "sceneGraphError"
+            revision: 2
+            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
+            Parameter { name: "message"; type: "string" }
+        }
+        Method { name: "update" }
+        Method { name: "releaseResources" }
+    }
+    Component {
+        name: "QQuickWindowAttached"
+        prototype: "QObject"
+        Property { name: "visibility"; type: "QWindow::Visibility"; isReadonly: true }
+        Property { name: "active"; type: "bool"; isReadonly: true }
+        Property { name: "activeFocusItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
+        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
+        Property { name: "width"; type: "int"; isReadonly: true }
+        Property { name: "height"; type: "int"; isReadonly: true }
+    }
+    Component {
+        name: "QQuickWindowQmlImpl"
+        defaultProperty: "data"
+        prototype: "QQuickWindow"
+        exports: ["QtQuick.Window/Window 2.1", "QtQuick.Window/Window 2.2"]
+        exportMetaObjectRevisions: [0, 1]
+        attachedType: "QQuickWindowAttached"
+        Property { name: "visible"; type: "bool" }
+        Property { name: "visibility"; type: "Visibility" }
+        Signal {
+            name: "visibleChanged"
+            Parameter { name: "arg"; type: "bool" }
+        }
+        Signal {
+            name: "visibilityChanged"
+            Parameter { name: "visibility"; type: "QWindow::Visibility" }
+        }
+    }
+    Component {
+        name: "QWindow"
+        prototype: "QObject"
+        Enum {
+            name: "Visibility"
+            values: {
+                "Hidden": 0,
+                "AutomaticVisibility": 1,
+                "Windowed": 2,
+                "Minimized": 3,
+                "Maximized": 4,
+                "FullScreen": 5
+            }
+        }
+        Property { name: "title"; type: "string" }
+        Property { name: "modality"; type: "Qt::WindowModality" }
+        Property { name: "flags"; type: "Qt::WindowFlags" }
+        Property { name: "x"; type: "int" }
+        Property { name: "y"; type: "int" }
+        Property { name: "width"; type: "int" }
+        Property { name: "height"; type: "int" }
+        Property { name: "minimumWidth"; type: "int" }
+        Property { name: "minimumHeight"; type: "int" }
+        Property { name: "maximumWidth"; type: "int" }
+        Property { name: "maximumHeight"; type: "int" }
+        Property { name: "visible"; type: "bool" }
+        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
+        Property { name: "visibility"; revision: 1; type: "Visibility" }
+        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
+        Property { name: "opacity"; revision: 1; type: "double" }
+        Signal {
+            name: "screenChanged"
+            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
+        }
+        Signal {
+            name: "modalityChanged"
+            Parameter { name: "modality"; type: "Qt::WindowModality" }
+        }
+        Signal {
+            name: "windowStateChanged"
+            Parameter { name: "windowState"; type: "Qt::WindowState" }
+        }
+        Signal {
+            name: "windowTitleChanged"
+            revision: 2
+            Parameter { name: "title"; type: "string" }
+        }
+        Signal {
+            name: "xChanged"
+            Parameter { name: "arg"; type: "int" }
+        }
+        Signal {
+            name: "yChanged"
+            Parameter { name: "arg"; type: "int" }
+        }
+        Signal {
+            name: "widthChanged"
+            Parameter { name: "arg"; type: "int" }
+        }
+        Signal {
+            name: "heightChanged"
+            Parameter { name: "arg"; type: "int" }
+        }
+        Signal {
+            name: "minimumWidthChanged"
+            Parameter { name: "arg"; type: "int" }
+        }
+        Signal {
+            name: "minimumHeightChanged"
+            Parameter { name: "arg"; type: "int" }
+        }
         Signal {
-            name: "linkActivated"
-            Parameter { name: "link"; type: "string" }
+            name: "maximumWidthChanged"
+            Parameter { name: "arg"; type: "int" }
         }
         Signal {
-            name: "linkHovered"
-            Parameter { name: "link"; type: "string" }
+            name: "maximumHeightChanged"
+            Parameter { name: "arg"; type: "int" }
         }
-        Method {
-            name: "append"
-            type: "QVariant"
-            Parameter { name: "string"; type: "QVariant" }
+        Signal {
+            name: "visibleChanged"
+            Parameter { name: "arg"; type: "bool" }
         }
-        Method { name: "copy"; type: "QVariant" }
-        Method { name: "cut"; type: "QVariant" }
-        Method { name: "deselect"; type: "QVariant" }
-        Method {
-            name: "getFormattedText"
-            type: "QVariant"
-            Parameter { name: "start"; type: "QVariant" }
-            Parameter { name: "end"; type: "QVariant" }
+        Signal {
+            name: "visibilityChanged"
+            revision: 1
+            Parameter { name: "visibility"; type: "QWindow::Visibility" }
         }
-        Method {
-            name: "getText"
-            type: "QVariant"
-            Parameter { name: "start"; type: "QVariant" }
-            Parameter { name: "end"; type: "QVariant" }
+        Signal { name: "activeChanged"; revision: 1 }
+        Signal {
+            name: "contentOrientationChanged"
+            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
         }
-        Method {
-            name: "insert"
-            type: "QVariant"
-            Parameter { name: "position"; type: "QVariant" }
-            Parameter { name: "text"; type: "QVariant" }
+        Signal {
+            name: "focusObjectChanged"
+            Parameter { name: "object"; type: "QObject"; isPointer: true }
         }
-        Method {
-            name: "isRightToLeft"
-            type: "QVariant"
-            Parameter { name: "start"; type: "QVariant" }
-            Parameter { name: "end"; type: "QVariant" }
+        Signal {
+            name: "opacityChanged"
+            revision: 1
+            Parameter { name: "opacity"; type: "double" }
         }
+        Method { name: "requestActivate"; revision: 1 }
         Method {
-            name: "moveCursorSelection"
-            type: "QVariant"
-            Parameter { name: "position"; type: "QVariant" }
-            Parameter { name: "mode"; type: "QVariant" }
+            name: "setVisible"
+            Parameter { name: "visible"; type: "bool" }
         }
-        Method { name: "paste"; type: "QVariant" }
+        Method { name: "show" }
+        Method { name: "hide" }
+        Method { name: "showMinimized" }
+        Method { name: "showMaximized" }
+        Method { name: "showFullScreen" }
+        Method { name: "showNormal" }
+        Method { name: "close"; type: "bool" }
+        Method { name: "raise" }
+        Method { name: "lower" }
         Method {
-            name: "positionAt"
-            type: "QVariant"
-            Parameter { name: "x"; type: "QVariant" }
-            Parameter { name: "y"; type: "QVariant" }
+            name: "setTitle"
+            Parameter { type: "string" }
         }
         Method {
-            name: "positionToRectangle"
-            type: "QVariant"
-            Parameter { name: "position"; type: "QVariant" }
+            name: "setX"
+            Parameter { name: "arg"; type: "int" }
         }
-        Method { name: "redo"; type: "QVariant" }
         Method {
-            name: "remove"
-            type: "QVariant"
-            Parameter { name: "start"; type: "QVariant" }
-            Parameter { name: "end"; type: "QVariant" }
+            name: "setY"
+            Parameter { name: "arg"; type: "int" }
         }
         Method {
-            name: "select"
-            type: "QVariant"
-            Parameter { name: "start"; type: "QVariant" }
-            Parameter { name: "end"; type: "QVariant" }
+            name: "setWidth"
+            Parameter { name: "arg"; type: "int" }
         }
-        Method { name: "selectAll"; type: "QVariant" }
-        Method { name: "selectWord"; type: "QVariant" }
-        Method { name: "undo"; type: "QVariant" }
-        Property { name: "frameVisible"; type: "bool" }
-        Property { name: "highlightOnFocus"; type: "bool" }
-        Property { name: "contentItem"; type: "QQuickItem"; isPointer: true }
-        Property { name: "__scroller"; type: "QQuickItem"; isPointer: true }
-        Property { name: "__scrollBarTopMargin"; type: "int" }
-        Property { name: "__viewTopMargin"; type: "int" }
-        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "__style"; type: "Style_QMLTYPE_2"; isPointer: true }
-        Property { name: "horizontalScrollBarPolicy"; type: "int" }
-        Property { name: "verticalScrollBarPolicy"; type: "int" }
-        Property { name: "viewport"; type: "QQuickItem"; isReadonly: true; isPointer: true }
-        Property { name: "flickableItem"; type: "QQuickFlickable"; isReadonly: true; isPointer: true }
-        Property { name: "__wheelAreaScrollSpeed"; type: "double" }
-        Property {
-            name: "__horizontalScrollBar"
-            type: "ScrollBar_QMLTYPE_25"
-            isReadonly: true
-            isPointer: true
+        Method {
+            name: "setHeight"
+            Parameter { name: "arg"; type: "int" }
         }
-        Property {
-            name: "__verticalScrollBar"
-            type: "ScrollBar_QMLTYPE_25"
-            isReadonly: true
-            isPointer: true
+        Method {
+            name: "setMinimumWidth"
+            Parameter { name: "w"; type: "int" }
         }
-    }
-    Component {
-        prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/TextField"
-        exports: ["QtQuick.Controls/TextField 1.0"]
-        exportMetaObjectRevisions: [0]
-        isComposite: true
-        defaultProperty: "data"
-        Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
-        Property { name: "selectByMouse"; type: "bool" }
-        Property { name: "menu"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "acceptableInput"; type: "bool"; isReadonly: true }
-        Property { name: "activeFocusOnPress"; type: "bool" }
-        Property { name: "canPaste"; type: "bool"; isReadonly: true }
-        Property { name: "canRedo"; type: "bool"; isReadonly: true }
-        Property { name: "canUndo"; type: "bool"; isReadonly: true }
-        Property { name: "textColor"; type: "QColor" }
-        Property { name: "cursorPosition"; type: "int" }
-        Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true }
-        Property { name: "displayText"; type: "string"; isReadonly: true }
-        Property { name: "echoMode"; type: "int" }
-        Property { name: "font"; type: "QFont" }
-        Property { name: "horizontalAlignment"; type: "int" }
-        Property { name: "effectiveHorizontalAlignment"; type: "int"; isReadonly: true }
-        Property { name: "verticalAlignment"; type: "int" }
-        Property { name: "inputMask"; type: "string" }
-        Property { name: "inputMethodHints"; type: "int" }
-        Property { name: "length"; type: "int"; isReadonly: true }
-        Property { name: "maximumLength"; type: "int" }
-        Property { name: "placeholderText"; type: "string" }
-        Property { name: "readOnly"; type: "bool" }
-        Property { name: "selectedText"; type: "string"; isReadonly: true }
-        Property { name: "selectionEnd"; type: "int"; isReadonly: true }
-        Property { name: "selectionStart"; type: "int"; isReadonly: true }
-        Property { name: "text"; type: "string" }
-        Property { name: "validator"; type: "QValidator"; isPointer: true }
-        Property { name: "hovered"; type: "bool"; isReadonly: true }
-        Property { name: "__contentHeight"; type: "double"; isReadonly: true }
-        Property { name: "__contentWidth"; type: "double"; isReadonly: true }
-        Property { name: "__baselineOffset"; type: "double" }
-        Signal { name: "accepted" }
-        Signal { name: "editingFinished" }
-        Method { name: "copy"; type: "QVariant" }
-        Method { name: "cut"; type: "QVariant" }
-        Method { name: "deselect"; type: "QVariant" }
         Method {
-            name: "getText"
-            type: "QVariant"
-            Parameter { name: "start"; type: "QVariant" }
-            Parameter { name: "end"; type: "QVariant" }
+            name: "setMinimumHeight"
+            Parameter { name: "h"; type: "int" }
         }
         Method {
-            name: "insert"
-            type: "QVariant"
-            Parameter { name: "position"; type: "QVariant" }
-            Parameter { name: "text"; type: "QVariant" }
+            name: "setMaximumWidth"
+            Parameter { name: "w"; type: "int" }
         }
         Method {
-            name: "isRightToLeft"
-            type: "QVariant"
-            Parameter { name: "start"; type: "QVariant" }
-            Parameter { name: "end"; type: "QVariant" }
+            name: "setMaximumHeight"
+            Parameter { name: "h"; type: "int" }
         }
-        Method { name: "paste"; type: "QVariant" }
-        Method { name: "redo"; type: "QVariant" }
         Method {
-            name: "select"
-            type: "QVariant"
-            Parameter { name: "start"; type: "QVariant" }
-            Parameter { name: "end"; type: "QVariant" }
+            name: "alert"
+            revision: 1
+            Parameter { name: "msec"; type: "int" }
         }
-        Method { name: "selectAll"; type: "QVariant" }
-        Method { name: "selectWord"; type: "QVariant" }
-        Method { name: "undo"; type: "QVariant" }
-        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "__style"; type: "QObject"; isPointer: true }
-        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
-        Property { name: "styleHints"; type: "QVariant" }
-        Property { name: "__styleData"; type: "QObject"; isPointer: true }
-    }
-    Component {
-        prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/ToolBar"
-        exports: ["QtQuick.Controls/ToolBar 1.0"]
-        exportMetaObjectRevisions: [0]
-        isComposite: true
-        defaultProperty: "__content"
-        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
-        Property { name: "__menu"; type: "QVariant" }
-        Property { name: "__style"; type: "QObject"; isReadonly: true; isPointer: true }
-        Property { name: "__content"; type: "QObject"; isList: true; isReadonly: true }
-        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
-    }
-    Component {
-        prototype: "QQuickFocusScope"
-        name: "QtQuick.Controls/ToolButton"
-        exports: ["QtQuick.Controls/ToolButton 1.0"]
-        exportMetaObjectRevisions: [0]
-        isComposite: true
-        defaultProperty: "data"
-        Property { name: "isDefault"; type: "bool" }
-        Property { name: "menu"; type: "Menu_QMLTYPE_49"; isPointer: true }
-        Property { name: "checkable"; type: "bool" }
-        Property { name: "checked"; type: "bool" }
-        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
-        Property { name: "action"; type: "QQuickAction"; isPointer: true }
-        Property { name: "activeFocusOnPress"; type: "bool" }
-        Property { name: "text"; type: "string" }
-        Property { name: "tooltip"; type: "string" }
-        Property { name: "iconSource"; type: "QUrl" }
-        Property { name: "iconName"; type: "string" }
-        Property { name: "__position"; type: "string" }
-        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
-        Property { name: "__action"; type: "QQuickAction"; isPointer: true }
-        Property { name: "__iconAction"; type: "QQuickAction"; isReadonly: true; isPointer: true }
-        Property { name: "__effectivePressed"; type: "bool" }
-        Property { name: "__behavior"; type: "QVariant" }
-        Property { name: "pressed"; type: "bool"; isReadonly: true }
-        Property { name: "hovered"; type: "bool"; isReadonly: true }
-        Signal { name: "clicked" }
-        Method { name: "accessiblePressAction"; type: "QVariant" }
-        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
-        Property { name: "__style"; type: "QObject"; isPointer: true }
-        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
-        Property { name: "styleHints"; type: "QVariant" }
-        Property { name: "__styleData"; type: "QObject"; isPointer: true }
+        Method { name: "requestUpdate"; revision: 3 }
     }
 }
