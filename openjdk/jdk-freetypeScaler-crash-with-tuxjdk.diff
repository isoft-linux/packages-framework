diff -Nur jdk8u-jdk8u45-b14/jdk/make/mapfiles/libfontmanager/mapfile-vers.openjdk jdk8u-jdk8u45-b14n/jdk/make/mapfiles/libfontmanager/mapfile-vers.openjdk
--- jdk8u-jdk8u45-b14/jdk/make/mapfiles/libfontmanager/mapfile-vers.openjdk	2015-02-05 12:00:26.000000000 +0000
+++ jdk8u-jdk8u45-b14n/jdk/make/mapfiles/libfontmanager/mapfile-vers.openjdk	2015-07-06 15:22:37.150751499 +0000
@@ -29,6 +29,7 @@
 
 SUNWprivate_1.1 {
 	global:
+                JNI_OnLoad;
                 getSunFontIDs;
                 newLayoutTableCache;
                 freeLayoutTableCache;
diff -Nur jdk8u-jdk8u45-b14/jdk/src/share/native/sun/font/freetypeScaler.c jdk8u-jdk8u45-b14n/jdk/src/share/native/sun/font/freetypeScaler.c
--- jdk8u-jdk8u45-b14/jdk/src/share/native/sun/font/freetypeScaler.c	2015-07-06 15:21:14.346752982 +0000
+++ jdk8u-jdk8u45-b14n/jdk/src/share/native/sun/font/freetypeScaler.c	2015-07-06 15:27:22.343746392 +0000
@@ -60,16 +60,6 @@
 } RenderingProperties;
 
 typedef struct {
-    /* Important note:
-         JNI forbids sharing same env between different threads.
-         We are safe, because pointer is overwritten every time we get into
-         JNI call (see setupFTContext).
-
-         Pointer is used by font data reading callbacks
-         such as ReadTTFontFileFunc.
-
-         NB: We may consider switching to JNI_GetEnv. */
-    JNIEnv* env;
     FT_Library library;
     FT_Face face;
     jobject font2D;
@@ -243,6 +233,13 @@
 void z_error(char *s) {}
 #endif
 
+static JavaVM* jvm = NULL;
+
+JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
+    jvm = vm;
+    return JNI_VERSION_1_2;
+}
+
 /**************** Error handling utilities *****************/
 
 static jmethodID invalidateScalerMID;
@@ -272,6 +269,9 @@
 
     FT_Done_Face(scalerInfo->face);
     FT_Done_FreeType(scalerInfo->library);
+    if (scalerInfo->font2D != NULL) {
+        (*env)->DeleteGlobalRef(env, scalerInfo->font2D);
+    }
 
     if (scalerInfo->directBuffer != NULL) {
         (*env)->DeleteGlobalRef(env, scalerInfo->directBuffer);
@@ -300,10 +300,9 @@
 
 #define FILEDATACACHESIZE 1024
 
-/* NB: is it ever called? */
 static void CloseTTFontFileFunc(FT_Stream stream) {
+    JNIEnv* env = (JNIEnv*) JNU_GetEnv(jvm, JNI_VERSION_1_2);
     FTScalerInfo *scalerInfo = (FTScalerInfo *) stream->pathname.pointer;
-    JNIEnv* env = scalerInfo->env;
     jclass tmpClass = (*env)->FindClass(env, "sun/font/TrueTypeFont");
     jfieldID platNameField =
          (*env)->GetFieldID(env, tmpClass, "platName", "Ljava/lang/String;");
@@ -396,8 +395,7 @@
     if (scalerInfo == NULL)
         return 0;
 
-    scalerInfo->env = env;
-    scalerInfo->font2D = font2D;
+    scalerInfo->font2D = (*env)->NewGlobalRef(env, font2D);
     scalerInfo->fontDataOffset = 0;
     scalerInfo->fontDataLength = 0;
     scalerInfo->fileSize = filesize;
@@ -414,6 +412,7 @@
     */
     error = FT_Init_FreeType(&scalerInfo->library);
     if (error) {
+        (*env)->DeleteGlobalRef(env, scalerInfo->font2D);
         free(scalerInfo);
         return 0;
     }
@@ -484,6 +483,7 @@
         }
         if (scalerInfo->fontData != NULL)
             free(scalerInfo->fontData);
+        (*env)->DeleteGlobalRef(env, scalerInfo->font2D);
         free(scalerInfo);
         return 0;
     }
@@ -553,8 +553,10 @@
                           FTScalerContext *context) {
     int errCode = 0;
 
-    scalerInfo->env = env;
-    scalerInfo->font2D = font2D;
+    if (scalerInfo->font2D != NULL) {
+        (*env)->DeleteGlobalRef(env, scalerInfo->font2D);
+    }
+    scalerInfo->font2D = (*env)->NewGlobalRef(env, font2D);
 
     if (context != NULL) {
 
--- jdk8u-jdk8u45-b14n/jdk/src/share/native/sun/font/freetypeScaler.c	2015-07-06 15:27:22.343746392 +0000
+++ jdk8u-jdk8u45-b14/jdk/src/share/native/sun/font/freetypeScaler.c	2015-07-06 15:58:52.248712547 +0000
@@ -318,8 +318,8 @@
                                         unsigned char* destBuffer,
                                         unsigned long numBytes)
 {
+    JNIEnv* env = (JNIEnv*) JNU_GetEnv(jvm, JNI_VERSION_1_2);
     FTScalerInfo *scalerInfo = (FTScalerInfo *) stream->pathname.pointer;
-    JNIEnv* env = scalerInfo->env;
     jobject bBuffer;
     int bread = 0;
 
